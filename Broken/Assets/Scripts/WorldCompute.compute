#pragma kernel InitializeCounter
#pragma kernel InitializeChunks
#pragma kernel InitializeDummyChunk
#pragma kernel InitializeCubes
#pragma kernel InitializeAdjacentChunkIndexes
#pragma kernel Noise
#pragma kernel CheckFaces
#pragma kernel PopulateRender 
#pragma kernel RaycastCull
#pragma kernel StupidCull
#pragma kernel StupidCull2

RWStructuredBuffer<uint3> _ChunkTable;
RWStructuredBuffer<uint> _DummyChunk;
AppendStructuredBuffer<uint> _LeadingEdgeTemp;
RWStructuredBuffer<uint> _LeadingEdgeTable;
RWStructuredBuffer<uint> _EdgeTable;
AppendStructuredBuffer<uint> _AdjacentChunkIndexesTemp;
RWStructuredBuffer<uint> _AdjacentChunkIndexesTable;
RWStructuredBuffer<uint> _MeshProperties;
RWStructuredBuffer<int> _Counter;
AppendStructuredBuffer<uint> _RenderProperties;

//These are just references for the cull method
RWStructuredBuffer<uint> _DiagonalTopChunk;
RWStructuredBuffer<uint> _TopLeftChunk;
RWStructuredBuffer<uint> _DiagonalMiddleChunk;
RWStructuredBuffer<uint> _MiddleLeftChunk;
RWStructuredBuffer<uint> _TopRightChunk;
RWStructuredBuffer<uint> _MiddleTopChunk;
RWStructuredBuffer<uint> _MiddleRightChunk;

uint cubeCount;
uint length;
uint height;
uint width;
uint xChunks;
uint yChunks;
uint zChunks;
uint xOffset;
uint yOffset;
uint zOffset;

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// Added 5/2/2021
float3 mod289(float3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x) {
	return mod289(((x * 34.0) + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
	return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
	const float2  C = float2(1.0 / 6.0, 1.0 / 3.0);
	const float4  D = float4(0.0, 0.5, 1.0, 2.0);

	// First corner
	float3 i = floor(v + dot(v, C.yyy));
	float3 x0 = v - i + dot(i, C.xxx);

	// Other corners
	float3 g = step(x0.yzx, x0.xyz);
	float3 l = 1.0 - g;
	float3 i1 = min(g.xyz, l.zxy);
	float3 i2 = max(g.xyz, l.zxy);

	//   x0 = x0 - 0.0 + 0.0 * C.xxx;
	//   x1 = x0 - i1  + 1.0 * C.xxx;
	//   x2 = x0 - i2  + 2.0 * C.xxx;
	//   x3 = x0 - 1.0 + 3.0 * C.xxx;
	float3 x1 = x0 - i1 + C.xxx;
	float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

  // Permutations
	i = mod289(i);
	float4 p = permute(permute(permute(
		i.z + float4(0.0, i1.z, i2.z, 1.0))
		+ i.y + float4(0.0, i1.y, i2.y, 1.0))
		+ i.x + float4(0.0, i1.x, i2.x, 1.0));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	float n_ = 0.142857142857; // 1.0/7.0
	float3  ns = n_ * D.wyz - D.xzx;

	float4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	float4 x_ = floor(j * ns.z);
	float4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

	float4 x = x_ * ns.x + ns.yyyy;
	float4 y = y_ * ns.x + ns.yyyy;
	float4 h = 1.0 - abs(x) - abs(y);

	float4 b0 = float4(x.xy, y.xy);
	float4 b1 = float4(x.zw, y.zw);

	//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	float4 s0 = floor(b0) * 2.0 + 1.0;
	float4 s1 = floor(b1) * 2.0 + 1.0;
	float4 sh = -step(h, float4(0, 0, 0, 0));

	float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

	float3 p0 = float3(a0.xy, h.x);
	float3 p1 = float3(a0.zw, h.y);
	float3 p2 = float3(a1.xy, h.z);
	float3 p3 = float3(a1.zw, h.w);

	//Normalise gradients
	float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
	m = m * m;
	return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1),
		dot(p2, x2), dot(p3, x3)));
}

float hash(float n)
{
	return frac(sin(n)*43758.5453);
}

float noise(float3 x)
{
	// The noise function returns a value in the range -1.0f -> 1.0f

	float3 p = floor(x);
	float3 f = frac(x);

	f = f * f*(3.0 - 2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
		lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
		lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
			lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
}


[numthreads(1, 1, 1)]
void InitializeCounter(uint3 id : SV_DispatchThreadID)
{
	_Counter[id.x] = 0;
}

[numthreads(8, 1, 1)]
void InitializeChunks(uint3 id : SV_DispatchThreadID)
{
	_ChunkTable[id.x] = uint3(floor(id.x / (yChunks * zChunks)), floor(id.x / zChunks) % yChunks, id.x % zChunks);
	if (_ChunkTable[id.x].x == xChunks - 1 || _ChunkTable[id.x].y == yChunks - 1 || _ChunkTable[id.x].z == zChunks - 1)
	{
		_LeadingEdgeTemp.Append(id.x);
	}
}

[numthreads(8, 1, 1)]
void InitializeDummyChunk(uint3 id : SV_DispatchThreadID)
{
	_DummyChunk[id.x] = 0;
}

[numthreads(1024, 1, 1)]
void InitializeCubes(uint3 id : SV_DispatchThreadID)
{
	bool isTop = 0;
	bool isLeft = 0;
	bool isRight = 0;

	_ChunkTable[id.x] = uint3(floor(id.x / (height * width)), floor(id.x / width) % height, id.x % width);

	if (_ChunkTable[id.x].x == length - 1)
	{
		isLeft = 1;
	}
	if (_ChunkTable[id.x].y == height - 1)
	{
		isTop = 1;
	}
	if (_ChunkTable[id.x].z == width - 1)
	{
		isRight = 1;
	}

	if (isLeft)
	{
		if (isTop)
		{
			if (isRight)
			{
				//this is the single index for the leading corner of the chunk
				_EdgeTable[id.x] = 0;

				//store the adjacent index for this case
				_EdgeTable[id.x] |= (id.x - cubeCount) << 6;
			}
			else
			{
				//Top Left
				_EdgeTable[id.x] = 1;

				_EdgeTable[id.x] |= (id.x - (cubeCount - width - 1)) << 6;
			}
		}
		else
		{
			if (isRight)
			{
				//Diagonal Middle
				_EdgeTable[id.x] = 2;

				_EdgeTable[id.x] |= (id.x - (cubeCount - width * height - 1)) << 6;
			}
			else
			{
				//Middle Left
				_EdgeTable[id.x] = 3;

				_EdgeTable[id.x] |= (id.x - (cubeCount - width * height - width)) << 6;
			}
		}

		_EdgeTable[id.x] |= 1U << 5;
	}
	else
	{
		if (isTop)
		{
			if (isRight)
			{
				//Top Right
				_EdgeTable[id.x] = 4;

				_EdgeTable[id.x] |= (id.x + 1) << 6;
			}
			else
			{
				//Top Middle
				_EdgeTable[id.x] = 5;

				_EdgeTable[id.x] |= (id.x + width) << 6;
			}
			_EdgeTable[id.x] |= 1U << 5;
		}
		else
		{
			if (isRight)
			{
				//Middle Right
				_EdgeTable[id.x] = 6;

				_EdgeTable[id.x] |= (id.x + width * height + 1) << 6;

				_EdgeTable[id.x] |= 1U << 5;
			}
		}
	}

	if (_ChunkTable[id.x].x == 0 || _ChunkTable[id.x].y == 0 || _ChunkTable[id.x].z == 0)
	{
		//trailing face
		//by default, no need for else statement, the 5th bit place will be zero
		//idk but the 4th bit place doesnt seem to work;
		_EdgeTable[id.x] |= 1U << 4;
	}
	

}

//this is unncessary
[numthreads(1024,1,1)]
void InitializeAdjacentChunkIndexes(uint3 id : SV_DispatchThreadID)
{
	if (((_EdgeTable[id.x] >> 5) & 1U) == 1U)
	{
		uint edgeCase = (_EdgeTable[id.x] & 0x7);
		[forcecase] switch (edgeCase)
		{
		case 0:
			_AdjacentChunkIndexesTemp.Append(id.x - cubeCount);
			break;
		case 1:
			_AdjacentChunkIndexesTemp.Append(id.x - (cubeCount - width - 1));
			break;
		case 2:
			_AdjacentChunkIndexesTemp.Append(id.x - (cubeCount - width * height - 1));
			break;
		case 3:
			_AdjacentChunkIndexesTemp.Append(id.x - (cubeCount - width * height - width));
			break;
		case 4:
			_AdjacentChunkIndexesTemp.Append(id.x + 1);
			break;
		case 5:
			_AdjacentChunkIndexesTemp.Append(id.x + width);
			break;
		case 6:
			_AdjacentChunkIndexesTemp.Append(id.x + width * height + 1);
			break;
		}

	}
}

[numthreads(1024, 1, 1)]
void Noise(uint3 id : SV_DispatchThreadID)
{
	if(noise((_ChunkTable[id.x] + uint3(xOffset, yOffset, zOffset)) * 0.1) >= .45)
	{
		//this will need to be revisted later for more complex world gen
		_MeshProperties[id.x] |= 1U << 0;
	}
	else
	{
		_MeshProperties[id.x] = 0;
	}
}

//method to check other algorithm
[numthreads(1024, 1, 1)]
void CheckFaces(uint3 id : SV_DispatchThreadID)
{
	if (_MeshProperties[id.x] != 0 && (_MeshProperties[id.x + 1] == 0 || _MeshProperties[id.x - 1] == 0 
		|| _MeshProperties[id.x + width] == 0 || _MeshProperties[id.x - width] == 0 
		|| _MeshProperties[id.x + width * height] == 0 || _MeshProperties[id.x - width * height] == 0 
		|| _ChunkTable[id.x].y == 0 || _ChunkTable[id.x].y == height - 1 || _ChunkTable[id.x].z == 0 || _ChunkTable[id.x].z == width - 1))
	{
		InterlockedAdd(_Counter[0], 1);
		_MeshProperties[id.x] |= 1U << 12;
	}
	else
	{
		_MeshProperties[id.x] &= ~(1U << 12);
	}
}

[numthreads(1024, 1, 1)]
void PopulateRender(uint3 id : SV_DispatchThreadID)
{
	if ((_MeshProperties[id.x] >> 12) & 1U == 1)
	{
		_RenderProperties.Append(id.x);
	}
}

//this does not work anymore
[numthreads(64,1, 1)]
void RaycastCull(uint3 id : SV_DispatchThreadID)
{
	uint index = _LeadingEdgeTable[id.x];
	if (index != 0)
	{
		//this is retarded but idk how to fix the loop
		if (_MeshProperties[index] != 0)
		{
			InterlockedAdd(_Counter[0], 1);
			_MeshProperties[index] |= 1U << 12;

			while (_EdgeTable[index] == 0)
			{
				index -= ((width * height) + width + 1);
				_MeshProperties[index] &= ~(1U << 12);
			}
		}
		else
		{
			_MeshProperties[index] &= ~(1U << 12);
		}

		while (_EdgeTable[index] == 0)
		{
			index -= ((width * height) + width + 1);

			if (_MeshProperties[index] != 0)
			{
				InterlockedAdd(_Counter[0], 1);
				_MeshProperties[index] |= 1U << 12;

				while (_EdgeTable[index] == 0)
				{
					index -= ((width * height) + width + 1);
					_MeshProperties[index] &= ~(1U << 12);
				}
			}
			else
			{
				_MeshProperties[index] &= ~(1U << 12);
			}
		}
	}
}

//this is retarded but necessary because of buffer limit
[numthreads(1024, 1, 1)]
void StupidCull(uint3 id: SV_DispatchThreadID)
{	
	if (((_EdgeTable[id.x] >> 5) & 1U) == 1U)
	{
		uint index = id.x;
		bool visibilityCheck = 0;
		bool skip = 1;

		switch (_EdgeTable[index] & 0x7)
		{
		case 0:
			if (((_DiagonalTopChunk[_EdgeTable[id.x] >> 6] >> 13) & 1U) == 0)
			{
				visibilityCheck = 1;
			}
			break;
		case 1:
			if (((_TopLeftChunk[_EdgeTable[id.x] >> 6] >> 13) & 1U) == 0)
			{
				visibilityCheck = 1;
			}
			break;
		case 2:
			if (((_DiagonalMiddleChunk[_EdgeTable[id.x] >> 6] >> 13) & 1U) == 0)
			{
				visibilityCheck = 1;
			}
			break;
		case 3:
			if (((_MiddleLeftChunk[_EdgeTable[id.x] >> 6] >> 13) & 1U) == 0)
			{
				visibilityCheck = 1;
			}
			break;
		case 4:
			skip = 0;
			break;
		case 5:
			skip = 0;
			break;
		case 6:
			skip = 0;
			break;
		}
		
		if (visibilityCheck)
		{
			//this is retarded but idk how to fix
			if (_MeshProperties[index] != 0)
			{
				InterlockedAdd(_Counter[0], 1);
				_MeshProperties[index] |= 1U << 12;
				_MeshProperties[index] |= 1U << 13;

				while (((_EdgeTable[index] >> 4) & 1U) == 0U)
				{
					index -= ((width * height) + width + 1);
					_MeshProperties[index] &= ~(1U << 12);
					_MeshProperties[index] |= 1U << 13;
				}
			}
			else
			{
				_MeshProperties[index] &= ~(1U << 12);
			}

			while (((_EdgeTable[index] >> 4) & 1U) == 0U)
			{
				index -= ((width * height) + width + 1);

				if (_MeshProperties[index] != 0)
				{
					InterlockedAdd(_Counter[0], 1);
					_MeshProperties[index] |= 1U << 12;
					_MeshProperties[index] |= 1U << 13;

					while (((_EdgeTable[index] >> 4) & 1U) == 0U)
					{
						index -= ((width * height) + width + 1);
						_MeshProperties[index] &= ~(1U << 12);
						_MeshProperties[index] |= 1U << 13;
					}
				}
				else
				{
					_MeshProperties[index] &= ~(1U << 12);
				}
			}
		}
		else
		{
			if (skip)
			{
				while (((_EdgeTable[index] >> 4) & 1U) == 0U)
				{
					index -= ((width * height) + width + 1);
					_MeshProperties[index] &= ~(1U << 12);
					_MeshProperties[index] |= 1U << 13;
				}
			}
		}
	}
}

[numthreads(1024, 1, 1)]
void StupidCull2(uint3 id: SV_DispatchThreadID)
{
	if (((_EdgeTable[id.x] >> 5) & 1U) == 1U)
	{
		uint index = id.x;
		bool visibilityCheck = 0;
		bool skip = 1;
		switch (_EdgeTable[index] & 0x7)
		{
		case 0:
			skip = 0;
			break;
		case 1:
			skip = 0;
			break;
		case 2:
			skip = 0;
			break;
		case 3:
			skip = 0;
			break;
		case 4:
			if (((_TopRightChunk[_EdgeTable[id.x] >> 6] >> 13) & 1U) == 0)
			{
				visibilityCheck = 1;
			}
			break;
		case 5:
			if (((_MiddleTopChunk[_EdgeTable[id.x] >> 6] >> 13) & 1U) == 0)
			{
				visibilityCheck = 1;
			}
			break;
		case 6:
			if (((_MiddleRightChunk[_EdgeTable[id.x] >> 6] >> 13) & 1U) == 0)
			{
				visibilityCheck = 1;
			}
			break;
		}

		if (visibilityCheck)
		{
			//this is retarded but idk how to fix
			if (_MeshProperties[index] != 0)
			{
				InterlockedAdd(_Counter[0], 1);
				_MeshProperties[index] |= 1U << 12;
				_MeshProperties[index] |= 1U << 13;

				while (((_EdgeTable[index] >> 4) & 1U) == 0U)
				{
					index -= ((width * height) + width + 1);
					_MeshProperties[index] &= ~(1U << 12);
					_MeshProperties[index] |= 1U << 13;
				}
			}
			else
			{
				_MeshProperties[index] &= ~(1U << 12);
			}

			while (((_EdgeTable[index] >> 4) & 1U) == 0U)
			{
				index -= ((width * height) + width + 1);

				if (_MeshProperties[index] != 0)
				{
					InterlockedAdd(_Counter[0], 1);
					_MeshProperties[index] |= 1U << 12;
					_MeshProperties[index] |= 1U << 13;

					while (((_EdgeTable[index] >> 4) & 1U) == 0U)
					{
						index -= ((width * height) + width + 1);
						_MeshProperties[index] &= ~(1U << 12);
						_MeshProperties[index] |= 1U << 13;
					}
				}
				else
				{
					_MeshProperties[index] &= ~(1U << 12);
				}
			}
		}
		else
		{
			if (skip)
			{
				while (((_EdgeTable[index] >> 4) & 1U) == 0U)
				{
					index -= ((width * height) + width + 1);
					_MeshProperties[index] &= ~(1U << 12);
					_MeshProperties[index] |= 1U << 13;
				}
			}
		}
	}
}




	

	
