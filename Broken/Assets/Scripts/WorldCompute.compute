#pragma kernel ZeroCounter
#pragma kernel ClearMeshProperties
#pragma kernel InitializeDummyChunks
#pragma kernel InitializeChunkVisibilityTable
#pragma kernel InitializeGlobalHeightTable
#pragma kernel InitializeGlobalSolidBuffer
#pragma kernel InitializeLocalTransferBuffers
#pragma kernel InitializeHashTransferBuffer
#pragma kernel InitializeCubes
#pragma kernel InitializeChunks
#pragma kernel SingleThread
#pragma kernel InitializeRays
#pragma kernel InitializeRaysTwo
#pragma kernel Noise
#pragma kernel CheckFaces
#pragma kernel PopulateRender 
#pragma kernel ChunkVisibilityTable
#pragma kernel ChunkVisibilityTableTwo
#pragma kernel TransferGlobalHeights
#pragma kernel GlobalShadowCalcs
#pragma kernel FinalCull
#pragma kernel ChunkGlobalVis
#pragma kernel ChunkGlobalVisTwo
#pragma kernel StupidCull
#pragma kernel StupidCull2
#pragma kernel CoolCull
#pragma kernel LowVis
#pragma kernel BottomLeftVis
#pragma kernel BottomRightVis
#pragma kernel CenterBottomVis
#pragma kernel DiagonalMiddleVis
#pragma kernel MiddleLeftVis
#pragma kernel MiddleRightVis

struct KeyValue
{
	uint key;
	uint value;
};

struct DualIndex
{
	uint lowIndex;
	uint highIndex;
};

struct TriIndex
{
	uint lowIndex;
	uint highIndex;
	uint thirdIndex;
};

RWStructuredBuffer<uint> _DummyChunkOne;
RWStructuredBuffer<uint> _DummyChunkTwo;
RWStructuredBuffer<DualIndex> _AltDummyChunk;

RWStructuredBuffer<uint> _ChunkEdgeTable;
RWStructuredBuffer<uint3> _ChunkPositionTable;
RWStructuredBuffer<uint> _TempTable;
RWStructuredBuffer<TriIndex> _EdgeTable;
RWStructuredBuffer<uint> _ChunkVisibilityTables;
RWStructuredBuffer<uint3> _ChunkTable;
RWStructuredBuffer<DualIndex> _MeshProperties;
RWStructuredBuffer<int> _Counter;
AppendStructuredBuffer<uint> _RenderProperties;

RWStructuredBuffer<uint> HeightTransferBuffer;
RWStructuredBuffer<uint> SolidTransferBuffer;
RWStructuredBuffer<KeyValue> HashTransferBuffer;

RWStructuredBuffer<uint> _GlobalHeightTable;
RWStructuredBuffer<uint> GlobalSolidBuffer;
RWStructuredBuffer<uint> _GlobalShadowTable;

RWStructuredBuffer<uint> _ChunkVisibility;

RWStructuredBuffer<uint> BugBuffer;

//These are just references for the cull method.
StructuredBuffer<uint> _DiagonalTopChunk;
StructuredBuffer<uint> _TopLeftChunk;
StructuredBuffer<uint> _DiagonalMiddleChunk;
StructuredBuffer<uint> _MiddleLeftChunk;
StructuredBuffer<uint> _TopRightChunk;
StructuredBuffer<uint> _MiddleTopChunk;
StructuredBuffer<uint> _MiddleRightChunk;

StructuredBuffer<DualIndex> _IntDiagonalMiddleChunk;
StructuredBuffer<DualIndex> _IntMiddleLeftChunk;
StructuredBuffer<DualIndex> _IntMiddleRightChunk;

extern uint cubeCount;
extern uint leadingEdgeCount;
extern uint stepIndex;
extern uint counter;
extern uint length;
extern uint height;
extern uint width;
extern uint xChunks;
extern uint yChunks;
extern uint zChunks;
extern uint xOffset;
extern uint yOffset;
extern uint zOffset;

extern uint globalLength;
extern uint globalHeight;
extern uint globalWidth;
extern uint globalStep;
extern uint e_chunkStepDepth;

//8 by default
extern uint e_heightPackedSize;
//32 by default
extern uint e_solidPackedSize;

//4 by default
extern uint e_heightSizeInBits;
//1 by default
extern uint e_solidSizeInBits;


//the y level of the current cross
extern uint e_crossYChunk;
// size of the hashBuffer
extern uint e_hashBufferSize;

extern uint e_trueCrossHeight;

extern bool topEdge;
extern uint e_localCrossHeight;
extern uint trueHeight;
extern uint currentYChunk;
extern uint chunkIndex;
extern uint topOffset;
extern uint sameLevelOffset;

//hashbuffer sentinel empty value
static uint s_empty = 0xffffffff;

static uint s_shadowComparisons[16] = { 0, 32768U, 49152U, 57344U,
										61440U, 63488U, 64512U, 65024U,
										65280U, 65408U, 65472U, 65504U,
										65520U, 65528U, 65532U, 65534U };

static uint s_heightComparison = 15U;

static uint s_solidComparison = 1U;
//**************************************************
//Bit index values.
//LocalEdgeTable 0-2 Leading Face identifier, 3-5 Trailing Face identifier, 6 leading sides identifer, 7-18 corresponding index in adjacent chunk, 19-30 corresponding ray index from any local index. 
static uint s_localEdgeTrailingFace = 3;
static uint s_localEdgeLeadingSides = 6;
static uint s_localEdgeNextIndex = 7;
static uint s_localEdgeRayIndex = 19;

//ChunkEdgeTable 0-2 Leading Face identifier, 3-5 Trailing Face identifier
static uint s_chunkEdgeTrailingFace = 3;

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// Added 5/2/2021
float3 mod289(float3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x) {
	return mod289(((x * 34.0) + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
	return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
	const float2  C = float2(1.0 / 6.0, 1.0 / 3.0);
	const float4  D = float4(0.0, 0.5, 1.0, 2.0);

	// First corner
	float3 i = floor(v + dot(v, C.yyy));
	float3 x0 = v - i + dot(i, C.xxx);

	// Other corners
	float3 g = step(x0.yzx, x0.xyz);
	float3 l = 1.0 - g;
	float3 i1 = min(g.xyz, l.zxy);
	float3 i2 = max(g.xyz, l.zxy);

	//   x0 = x0 - 0.0 + 0.0 * C.xxx;
	//   x1 = x0 - i1  + 1.0 * C.xxx;
	//   x2 = x0 - i2  + 2.0 * C.xxx;
	//   x3 = x0 - 1.0 + 3.0 * C.xxx;
	float3 x1 = x0 - i1 + C.xxx;
	float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

  // Permutations
	i = mod289(i);
	float4 p = permute(permute(permute(
		i.z + float4(0.0, i1.z, i2.z, 1.0))
		+ i.y + float4(0.0, i1.y, i2.y, 1.0))
		+ i.x + float4(0.0, i1.x, i2.x, 1.0));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	float n_ = 0.142857142857; // 1.0/7.0
	float3  ns = n_ * D.wyz - D.xzx;

	float4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	float4 x_ = floor(j * ns.z);
	float4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

	float4 x = x_ * ns.x + ns.yyyy;
	float4 y = y_ * ns.x + ns.yyyy;
	float4 h = 1.0 - abs(x) - abs(y);

	float4 b0 = float4(x.xy, y.xy);
	float4 b1 = float4(x.zw, y.zw);

	//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	float4 s0 = floor(b0) * 2.0 + 1.0;
	float4 s1 = floor(b1) * 2.0 + 1.0;
	float4 sh = -step(h, float4(0, 0, 0, 0));

	float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

	float3 p0 = float3(a0.xy, h.x);
	float3 p1 = float3(a0.zw, h.y);
	float3 p2 = float3(a1.xy, h.z);
	float3 p3 = float3(a1.zw, h.w);

	//Normalise gradients
	float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
	m = m * m;
	return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1),
		dot(p2, x2), dot(p3, x3)));
}

float rand(float n)
{
	return frac(sin(n)*43758.5453);
}

float noise(float3 x)
{
	// The noise function returns a value in the range -1.0f -> 1.0f

	float3 p = floor(x);
	float3 f = frac(x);

	f = f * f*(3.0 - 2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp(rand(n + 0.0), rand(n + 1.0), f.x),
		lerp(rand(n + 57.0), rand(n + 58.0), f.x), f.y),
		lerp(lerp(rand(n + 113.0), rand(n + 114.0), f.x),
			lerp(rand(n + 170.0), rand(n + 171.0), f.x), f.y), f.z);
}
//*************************************************************************************
// Murmurhash3 32Bit Hash Function
// Author: Austin Appleby
// Lastmod: 1/8/2016
// Liscence: MIT Liscence
// Added 8/4/2021

uint hash(uint k)
{
	k ^= k >> 16;
	k *= 0x85ebca6b;
	k ^= k >> 13;
	k *= 0xc2b2ae35;
	k ^= k >> 16;
	return k & (e_hashBufferSize - 1);
}

//*************************************************************************************
// Hash Table Functions
// Author: David Farell, Translated to HLSL by me
// Lastmod: 8/4/2021
// Liscence: Unliscence
// Added: 8/4/2021

void HashInsert(RWStructuredBuffer<KeyValue> _hashBuffer, uint key, uint value)
{
    uint slot = hash(key);

    while (true)
    {
        uint prev;

        InterlockedCompareExchange(_hashBuffer[slot].key, s_empty, key, prev);

        if (prev == s_empty || prev == key)
        {
            _hashBuffer[slot].value = value;
            return;
        }

        slot = (slot + 1) & (e_hashBufferSize - 1);
    }
}

uint HashLookup(RWStructuredBuffer<KeyValue> _hashBuffer, uint key)
{
    uint slot = hash(key);

    while (true)
    {
        if (_hashBuffer[slot].key == key)
        {
            return _hashBuffer[slot].value;
        }
        if (_hashBuffer[slot].key == s_empty)
        {
            return s_empty;
        }

        slot = (slot + 1) & (e_hashBufferSize - 1);
    }
}

void HashDelete(RWStructuredBuffer<KeyValue> _hashBuffer, uint key)
{
    uint slot = hash(key);

    while (true)
    {
        if (_hashBuffer[slot].key == s_empty)
        {
            return;
        }
        if (_hashBuffer[slot].key == key)
        {
            _hashBuffer[slot].value = s_empty;
            return;
        }
        slot = (slot + 1) & (e_hashBufferSize - 1);
    }
}
//***************************************************************************************


//returns if an index is on its leading edge
bool IsOnLeadingEdge(uint value, uint dimension)
{
	return value == (dimension - 1);
}

//returns if an index is on the trailing edge
bool IsOnTrailingEdge(uint value)
{
	return value == 0;
}

//converts index to the x coordinate in any sytem
uint IndexToXPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return round(floor(index / (dimensionY * dimensionZ)));
}

//converts index to the y coordinate in any sytem
uint IndexToYPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return round(floor(index / dimensionZ) % dimensionY);
}

uint IndexToZPosition(uint index, uint dimensionZ)
{
	return round(index % dimensionZ);
}
//translates any index to a position
uint3 IndexToPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return uint3(IndexToXPosition(index, dimensionY, dimensionZ), IndexToYPosition(index, dimensionY, dimensionZ), IndexToZPosition(index, dimensionZ));
}

//edge check specific to the local level
uint LocalEdgeChecks(uint localIndex, RWStructuredBuffer<uint3> chunkTable)
{
	bool isTop = IsOnLeadingEdge(chunkTable[localIndex].y, height);
	bool isLeft = IsOnLeadingEdge(chunkTable[localIndex].x, length);
	bool isRight = IsOnLeadingEdge(chunkTable[localIndex].z, width);
	uint edgeCase;

	if (isLeft)
	{
		if (isTop)
		{
			if (isRight)
			{
				//this is the single index for the leading corner of the chunk
				edgeCase = 0;

				edgeCase |= (1U << s_localEdgeLeadingSides);

				//store the adjacent index for this case
				edgeCase |= (localIndex - (cubeCount - 1)) << s_localEdgeNextIndex;
			}
			else
			{
				//Top Left
				edgeCase = 1;

				edgeCase |= (1U << s_localEdgeLeadingSides);

				edgeCase |= (localIndex - (cubeCount - (width + 1))) << s_localEdgeNextIndex;
			}
		}
		else
		{
			if (isRight)
			{
				//Diagonal Middle
				edgeCase = 2;

				edgeCase |= (1U << s_localEdgeLeadingSides);

				edgeCase |= (localIndex - (cubeCount - ((width * height) + 1))) << s_localEdgeNextIndex;
			}
			else
			{
				//Middle Left
				edgeCase = 3;

				edgeCase |= (1U << s_localEdgeLeadingSides);

				edgeCase |= (localIndex - (cubeCount - ((width * height) + width))) << s_localEdgeNextIndex;
			}
		}
	}
	else
	{
		if (isTop)
		{
			if (isRight)
			{
				//Top Right
				edgeCase = 4;

				edgeCase |= (1U << s_localEdgeLeadingSides);

				edgeCase |= (localIndex + 1) << s_localEdgeNextIndex;
			}
			else
			{
				//Top Middle
				edgeCase = 5;

				edgeCase |= (localIndex + width + 1) << s_localEdgeNextIndex;
			}
		}
		else
		{
			if (isRight)
			{
				//Middle Right
				edgeCase = 6;

				edgeCase |= (1U << s_localEdgeLeadingSides);

				edgeCase |= (localIndex + (width * height) + 1) << s_localEdgeNextIndex;
			}
			else
			{
				edgeCase = 7;
			}
		}
	}

	bool isBottom = IsOnTrailingEdge(chunkTable[localIndex].y);
	bool isTrailingRight = IsOnTrailingEdge(chunkTable[localIndex].x);
	bool isTrailingLeft = IsOnTrailingEdge(chunkTable[localIndex].z);

	if (isBottom)
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//bottom cube, the 0th index
				edgeCase |= (0 << s_localEdgeTrailingFace);
			}
			else
			{
				//bottom left
				edgeCase |= (1 << s_localEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//bottom right
				edgeCase |= (2 << s_localEdgeTrailingFace);
			}
			else
			{
				//center bottom
				edgeCase |= (3 << s_localEdgeTrailingFace);
			}
		}
	}
	else
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//diagonal middle
				edgeCase |= (4 << s_localEdgeTrailingFace);
			}
			else
			{
				//middle left
				edgeCase |= (5 << s_localEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//middle right
				edgeCase |= (6 << s_localEdgeTrailingFace);
			}
			else
			{
				//not on the trailing face
				edgeCase |= (7 << s_localEdgeTrailingFace);
			}
		}
	}

	return edgeCase;
}

//edge check specific to the chunk level
uint ChunkEdgeChecks(uint localIndex, RWStructuredBuffer<uint3> chunkPositionTable)
{
	bool isTop = IsOnLeadingEdge(chunkPositionTable[localIndex].y, yChunks);
	bool isLeft = IsOnLeadingEdge(chunkPositionTable[localIndex].x, xChunks);
	bool isRight = IsOnLeadingEdge(chunkPositionTable[localIndex].z, zChunks);
	uint edgeCase;

	if (isLeft)
	{
		if (isTop)
		{
			if (isRight)
			{
				//this is the single index for the leading corner of the chunk
				edgeCase = 0;
			}
			else
			{
				//Top Left
				edgeCase = 1;
			}
		}
		else
		{
			if (isRight)
			{
				//Diagonal Middle
				edgeCase = 2;
			}
			else
			{
				//Middle Left
				edgeCase = 3;
			}
		}
	}
	else
	{
		if (isTop)
		{
			if (isRight)
			{
				//Top Right
				edgeCase = 4;
			}
			else
			{
				//Top Middle
				edgeCase = 5;
			}
		}
		else
		{
			if (isRight)
			{
				//Middle Right
				edgeCase = 6;
			}
			else
			{
				edgeCase = 7;
			}
		}
	}

	bool isBottom = IsOnTrailingEdge(chunkPositionTable[localIndex].y);
	bool isTrailingRight = IsOnTrailingEdge(chunkPositionTable[localIndex].x);
	bool isTrailingLeft = IsOnTrailingEdge(chunkPositionTable[localIndex].z);

	if (isBottom)
	{
		if(isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//bottom cube, the 0th index, just for my own reference
				edgeCase |= (0 << s_chunkEdgeTrailingFace);
			}
			else
			{
				//bottom left
				edgeCase |= (1 << s_chunkEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//bottom right
				edgeCase |= (2 << s_chunkEdgeTrailingFace);
			}
			else
			{
				//center bottom
				edgeCase |= (3 << s_chunkEdgeTrailingFace);
			}
		}
	}
	else
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//diagonal middle
				edgeCase |= (4 << s_chunkEdgeTrailingFace);
			}
			else
			{
				//middle left
				edgeCase |= (5 << s_chunkEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//middle right
				edgeCase |= (6 << s_chunkEdgeTrailingFace);
			}
			else
			{
				//not on the trailing face
				edgeCase |= (7 << s_chunkEdgeTrailingFace);
			}
		}
	}

	return edgeCase;
}

//***********************************************************************************************************************************************************
//Reference Table Conversions

// returns the trailing face identifier 0-7
uint TrailingFace(RWStructuredBuffer<uint> chunkEdgeTable, uint chunkIndex)
{
	return (chunkEdgeTable[chunkIndex] >> s_chunkEdgeTrailingFace) & 0x7;
}

uint TrailingFace(RWStructuredBuffer<TriIndex> edgeTable, uint localIndex)
{
	return (edgeTable[localIndex].lowIndex >> s_localEdgeTrailingFace) & 0x7;
}

//these return wheather the given index is on the trailing face based on a lookup table
bool IsTrailingFace(RWStructuredBuffer<uint> chunkEdgeTable, uint chunkIndex)
{
	return TrailingFace(chunkEdgeTable, chunkIndex) != 7;
}

bool IsTrailingFace(RWStructuredBuffer<TriIndex> edgeTable, uint localIndex)
{
	return TrailingFace(edgeTable, localIndex) != 7;
}

//Returns the localIndex of the bottom of a local ray
uint LocalRayToBottom(uint localRayIndex, RWStructuredBuffer<TriIndex> edgeTable)
{
	return edgeTable[localRayIndex].highIndex & 4095U;
}

//Returns the localIndex of the top of a local ray
uint LocalRayToTop(uint localRayIndex, RWStructuredBuffer<TriIndex> edgeTable)
{
    return (edgeTable[localRayIndex].highIndex >> 13) & 4095U;
}

//Creates the lookup table for the following conversions: localIndex to localRayIndex; localRayIndex to Top, Bottom 
void rayCalc(RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<uint> tempTable, uint index)
{
	if (((edgeTable[index].lowIndex >> s_localEdgeTrailingFace) & 0x7) != 7)
	{
		uint tempIndex = index;

		edgeTable[tempIndex].lowIndex |= (tempTable[index] << s_localEdgeRayIndex);
		edgeTable[tempTable[index]].highIndex = tempIndex;
		while ((edgeTable[tempIndex].lowIndex & 0x7) == 7)
		{
			tempIndex += stepIndex;
			edgeTable[tempIndex].lowIndex |= (tempTable[index] << s_localEdgeRayIndex);
		}

		edgeTable[tempTable[index]].highIndex |= tempIndex << 13;
	}
}

//Creates the lookup table for the following conversion:
void rayCalcTwo(RWStructuredBuffer<TriIndex>  edgeTable, RWStructuredBuffer<uint> tempTable, uint index)
{
	if (((edgeTable[index].lowIndex >> s_localEdgeTrailingFace) & 0x7) != 7)
	{
		edgeTable[tempTable[index]].thirdIndex = edgeTable[(edgeTable[edgeTable[tempTable[index]].highIndex >> 13].lowIndex >> s_localEdgeNextIndex) & 0xFFF].lowIndex >> s_localEdgeRayIndex;
	}
}

uint visMethod(RWStructuredBuffer<int> counter, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, uint localCrossHeight)
{
	if ((meshProperties[index].lowIndex & 0xFFF) != 0)
	{
		InterlockedAdd(counter[0], 1);
		meshProperties[index].lowIndex |= 1U << 12 + localCrossHeight;
		meshProperties[index].lowIndex |= 1U << 13 + localCrossHeight;
		while (((edgeTable[index].lowIndex >> s_localEdgeTrailingFace) & 0x7) == 7)
		{
			index -= stepIndex;
			meshProperties[index].lowIndex |= 1U << 13 + localCrossHeight;
		}
	}
	return index;
}

void skipMethod(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, uint localCrossHeight)
{
	meshProperties[index].lowIndex |= 1U << 13 + localCrossHeight;
	while (((edgeTable[index].lowIndex >> s_localEdgeTrailingFace) & 0x7) == 7)
	{
		index -= stepIndex;
		meshProperties[index].lowIndex |= 1U << 13 + localCrossHeight;
	}
}

void calculateVisibility(RWStructuredBuffer<int> counter, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, bool visibilityCheck,
	bool skip, uint localCrossHeight)
{
	if (visibilityCheck)
	{
		index = visMethod(counter, meshProperties, edgeTable, index, localCrossHeight);
		while (((edgeTable[index].lowIndex >> s_localEdgeTrailingFace) & 0x7) == 7)
		{
			index -= stepIndex;
			index = visMethod(counter, meshProperties, edgeTable, index, localCrossHeight);
		}
	}
	else
	{
		if (skip)
		{
			skipMethod(meshProperties, edgeTable, index, localCrossHeight);
		}
	}
}

//*******************************************************
//new methods
bool NotOnLocalTrailingEdge(uint _index, RWStructuredBuffer<TriIndex> _edgeTable)
{
    return ((_edgeTable[_index].lowIndex >> s_localEdgeTrailingFace) & 0x7) == 7;
}

bool IsSolid(uint _index, RWStructuredBuffer<DualIndex> _meshProperties)
{
    return (_meshProperties[_index].lowIndex & 0xFFF) != 0;
}

void SetVis(uint _index, RWStructuredBuffer<DualIndex> _meshProperties,RWStructuredBuffer<int> _counter)
{
    InterlockedAdd(_counter[0], 1);
    _meshProperties[_index].lowIndex |= 1U << 12;
}


void FinalVisCalc(uint localRay, uint localCrossHeight, uint _currentYChunk, uint _crossYChunk, RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<int> counter, RWStructuredBuffer<uint3> chunkTable)
{
    uint cascIndex = LocalRayToTop(localRay, edgeTable);
	
    if (_currentYChunk == _crossYChunk)
    {
		//why? because the compiler is retarded thats why
        if (IsSolid(cascIndex, meshProperties) && chunkTable[cascIndex].y <= localCrossHeight)
        {
            SetVis(cascIndex, meshProperties, counter);
            return;
        }
	
        while (NotOnLocalTrailingEdge(cascIndex, edgeTable))
        {
            cascIndex -= stepIndex;
            if (IsSolid(cascIndex, meshProperties) && chunkTable[cascIndex].y <= localCrossHeight)
            {
                SetVis(cascIndex, meshProperties, counter);
                return;
            }
        }
    }
    else
    {
        if (IsSolid(cascIndex, meshProperties))
        {
            SetVis(cascIndex, meshProperties, counter);
            return;
        }
        while (NotOnLocalTrailingEdge(cascIndex, edgeTable))
        {
            cascIndex -= stepIndex;
            if (IsSolid(cascIndex, meshProperties))
            {
                SetVis(cascIndex, meshProperties, counter);
                return;
            }
        }
    }
}
//**********************************************************

uint visMethodHighIndex(RWStructuredBuffer<int> counter, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, uint localCrossHeight)
{
	if ((meshProperties[index].lowIndex & 0xFFF) != 0)
	{
		InterlockedAdd(counter[0], 1);
		meshProperties[index].highIndex |= 1U << localCrossHeight;
		meshProperties[index].highIndex |= 1U << 1 + localCrossHeight;
		while (((edgeTable[index].lowIndex >> s_localEdgeTrailingFace) & 0x7) == 7)
		{
			index -= stepIndex;
			meshProperties[index].highIndex |= 1U << 1 + localCrossHeight;
		}
	}
	return index;
}

void skipMethodHighIndex(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, uint localCrossHeight)
{
	meshProperties[index].highIndex |= 1U << 1 + localCrossHeight;
	while (((edgeTable[index].lowIndex >> s_localEdgeTrailingFace) & 0x7) == 7)
	{
		index -= stepIndex;
		meshProperties[index].highIndex |= 1U << 1 + localCrossHeight;
	}
}
void calculateVisibilityHighIndex(RWStructuredBuffer<int> counter, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, bool visibilityCheck,
	bool skip, uint localCrossHeight)
{
	if (visibilityCheck)
	{
		index = visMethodHighIndex(counter, meshProperties, edgeTable, index, localCrossHeight);
		while (((edgeTable[index].lowIndex >> s_localEdgeTrailingFace) & 0x7) == 7)
		{
			index -= stepIndex;
			index = visMethodHighIndex(counter, meshProperties, edgeTable, index, localCrossHeight);
		}
	}
	else
	{
		if (skip)
		{
			skipMethodHighIndex(meshProperties, edgeTable, index, localCrossHeight);
		}
	}
}

void calcChunkVis(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint> chunkVisibilityTable, RWStructuredBuffer<TriIndex> edgeTable, uint index)
{
	if ((meshProperties[index].lowIndex & 0xFFF) != 0)
	{
		InterlockedMin(chunkVisibilityTable[edgeTable[index].lowIndex >> s_localEdgeRayIndex], chunkTable[index].y);
	}
}

void calcChunkVisTwo(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint> chunkVisibilityTable, RWStructuredBuffer<TriIndex> edgeTable, uint index)
{
	if ((meshProperties[index].lowIndex & 0xFFF) != 0)
	{
		InterlockedOr(chunkVisibilityTable[edgeTable[index].lowIndex >> s_localEdgeRayIndex], 1U << 4);
	}
}

void calcGlobalVis(RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<uint> chunkVisibilityTable, StructuredBuffer<uint> nextChunk, RWStructuredBuffer<uint> chunkEdgeTable, uint index, uint chunkIndex, uint chunkHeight, uint currentYChunk)
{
	uint adjustedBitIndex = 5 + chunkHeight;
	if (chunkHeight <= currentYChunk || (((chunkEdgeTable[chunkIndex] >> 4) & 1U) == 1))
	{
		if ((chunkVisibilityTable[index] >> 4) & 1U == 1)
		{
			InterlockedOr(chunkVisibilityTable[index], 1U << adjustedBitIndex);
		}
	}

	if (((nextChunk[edgeTable[index].thirdIndex] >> adjustedBitIndex) & 1U) == 1)
	{
		InterlockedOr(chunkVisibilityTable[index], 1U << adjustedBitIndex);
	}

}

//returns the local index of the corresponding next chunk in a ray
uint LocalIndexToNext(uint localIndex, RWStructuredBuffer<TriIndex> edgeTable)
{
	return (edgeTable[localIndex].lowIndex >> 5) & 0xFFF;
}

//returns the local ray index from a local index
uint LocalIndexToLocalRay(uint localIndex, RWStructuredBuffer<TriIndex> edgeTable)
{
	return edgeTable[localIndex].lowIndex >> s_localEdgeRayIndex;
}

//returns the ray index of the corresponding next chunk in a ray
uint LocalIndexToNextRay(uint localIndex, RWStructuredBuffer<TriIndex> edgeTable)
{
	return LocalIndexToLocalRay(LocalIndexToNext(localIndex, edgeTable), edgeTable);
}

//returns whether the next chunk at the specified height level is in shadow
bool IsNextChunkInShadow(uint localIndex, uint shadowBitIndex, StructuredBuffer<uint> nextChunk, RWStructuredBuffer<TriIndex> edgeTable)
{
	return ((nextChunk[LocalIndexToNextRay(localIndex, edgeTable)] >> shadowBitIndex) & 1U) == 1;
}

//returns whether the next chunk is solid
bool IsNextChunkSolid(uint localIndex, StructuredBuffer<uint> nextChunk, RWStructuredBuffer<TriIndex> edgeTable)
{
	return ((nextChunk[LocalIndexToNextRay(localIndex, edgeTable)] >> 4) & 1U) == 1;
}

bool CalcLocalVis(RWStructuredBuffer<TriIndex> edgeTable, StructuredBuffer<uint> nextChunk, bool _visibilityCheck, uint index, uint _bitIndex, uint _yOffset, uint _trueHeight)
{
	if (IsNextChunkInShadow(index, _bitIndex, nextChunk, edgeTable))
	{
		if (!IsNextChunkSolid(index, nextChunk, edgeTable))
		{
			_visibilityCheck = false;
		}
		else
		{
			if (_trueHeight < ((nextChunk[edgeTable[(edgeTable[index].lowIndex >> s_localEdgeNextIndex) & 0xFFF].lowIndex >> s_localEdgeRayIndex] & 0xF) + _yOffset + 1))
			{
				_visibilityCheck = true;
			}
			else
			{
				_visibilityCheck = false;
			}
		}
	}
	else
	{
		_visibilityCheck = true;
	}

	return _visibilityCheck;
}

//****************************************************************************************************************************************************************************************************
// This contains the methods used to convert a given local index to a ray index

uint3 LocalIndexToPos(uint localIndex, RWStructuredBuffer<uint3> chunkTable)
{
	return chunkTable[localIndex];
}

uint3 LocalPosToGlobal(uint3 localPos, RWStructuredBuffer<uint3> chunkPositionTable, uint chunkIndex)
{
	return uint3(localPos.x + (chunkPositionTable[chunkIndex].x * length), localPos.y + (chunkPositionTable[chunkIndex].y * height), localPos.z + (chunkPositionTable[chunkIndex].z * width));
}

uint GlobalPosToIndex(uint3 globalPos)
{
	return (globalPos.x * globalHeight * globalWidth) + (globalPos.y * globalWidth) + globalPos.z;
}

//Returns the smallest dimension from (x,y,z)
//utility, move 
uint LimitingDim(uint3 pos)
{
	return min(min(pos.x, pos.y), pos.z);
}

//Returns the starting of a ray in the "inner" case
uint InnerToStarting(uint globalIndex, uint3 globalPos)
{
	return globalIndex - (LimitingDim(globalPos) * globalStep);

}

//returns the global index of the ray starting block.
//do not use this dogshit function for testing only
uint GlobalIndexToRayStartingIndex(uint globalIndex, uint localIndex, uint chunkIndex, uint3 globalPos, RWStructuredBuffer<uint> chunkEdgeTable, RWStructuredBuffer<TriIndex> edgeTable)
{
	    [branch] switch (TrailingFace(chunkEdgeTable, chunkIndex))
		{
		//origin position
		case 0:
			if (TrailingFace(edgeTable, localIndex) == 7)
			{
				return InnerToStarting(globalIndex, globalPos);
			}
			else
			{
				return globalIndex;
			}
		//bottom left
		case 1:
			if (TrailingFace(edgeTable, localIndex) == 6 || TrailingFace(edgeTable, localIndex) == 7)
			{
				return InnerToStarting(globalIndex, globalPos);
			}
			else
			{
				return globalIndex;
			}
		//bottom right
		case 2:
			if (TrailingFace(edgeTable, localIndex) == 5 || TrailingFace(edgeTable, localIndex) == 7)
			{
				return InnerToStarting(globalIndex, globalPos);
			}
			else
			{
				return globalIndex;
			}
		//center bottom
		case 3:
			if (TrailingFace(edgeTable, localIndex) == 3)
			{
				return globalIndex;
			}
			else 
			{
				return InnerToStarting(globalIndex, globalPos);
			}
		//diagonal middle
		case 4:
			if (TrailingFace(edgeTable, localIndex) == 3)
			{
				return InnerToStarting(globalIndex, globalPos);
			}
			else
			{
				return globalIndex;
			}
		//middle left
		case 5:
			if (TrailingFace(edgeTable, localIndex) == 0 || TrailingFace(edgeTable, localIndex) == 1 || TrailingFace(edgeTable, localIndex) == 4 || TrailingFace(edgeTable, localIndex) == 5)
			{
				return globalIndex;
			}
			else
			{
				return InnerToStarting(globalIndex, globalPos);
			}
		//middle right
		case 6:
			if (TrailingFace(edgeTable, localIndex) == 0 || TrailingFace(edgeTable, localIndex) == 2 || TrailingFace(edgeTable, localIndex) == 4 || TrailingFace(edgeTable, localIndex) == 6)
			{
				return globalIndex;
			}
			else
			{
				return InnerToStarting(globalIndex, globalPos);
			}
		//inner
		case 7:
			return InnerToStarting(globalIndex, globalPos);
		//this will never happen
		default:
			return 0;
		}
}
//use this method
uint GlobalIndexToRayStartingIndex(uint globalIndex, uint chunkIndex, uint3 globalPos, RWStructuredBuffer<uint> chunkEdgeTable)
{
	if (IsTrailingFace(chunkEdgeTable, chunkIndex))
	{
		if (globalIndex <= (globalHeight * globalWidth) - 1)
		{
			return globalIndex;
		}
		else
		{
			if (globalIndex % globalWidth == 0)
			{
				return globalIndex;
			}
			else
			{
				if (globalIndex % (globalWidth * globalHeight) <= globalWidth - 1U)
				{
					return globalIndex;
				}
				else
				{
					return InnerToStarting(globalIndex, globalPos);
				}
			}
		}
	}
	else
	{
		return InnerToStarting(globalIndex, globalPos);
	}
}

//intermediate function needed to pass the global pos
uint GlobalPosToRayStartingIndex(uint3 globalPos, uint chunkIndex, RWStructuredBuffer<uint> chunkEdgeTable)
{
	return GlobalIndexToRayStartingIndex(GlobalPosToIndex(globalPos), chunkIndex, globalPos, chunkEdgeTable);
}
uint GlobalPosToRayStartingIndex(uint3 globalPos, uint localIndex, uint chunkIndex, RWStructuredBuffer<uint> chunkEdgeTable, RWStructuredBuffer<TriIndex> edgeTable)
{
	return GlobalIndexToRayStartingIndex(GlobalPosToIndex(globalPos), localIndex, chunkIndex, globalPos, chunkEdgeTable, edgeTable);
}

//Because the intrinsic function does not work for uint
uint YClamp(uint valueIn)
{
	if (valueIn == 0)
	{
		return 0;
	}
	else
	{
		return valueIn - 1;
	}
}

//converts the global index position of the ray start to the ray index
uint RayStartingIndexToRay(uint rayStartingIndex)
{
	uint rayStartingX = IndexToXPosition(rayStartingIndex, globalHeight, globalWidth);
	uint rayStartingY = IndexToYPosition(rayStartingIndex, globalHeight, globalWidth);
	if (rayStartingX == 0)
	{
		return rayStartingIndex;
	}
	else
	{
		return rayStartingIndex - ((rayStartingX - 1) * (globalHeight - 1) * (globalWidth - 1) + (YClamp(rayStartingY)) * (globalWidth - 1));
	}
}

//Calls the above methods perform the conversion
uint LocalIndexToRayIndex(uint localIndex, uint chunkIndex, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable)
{
	return RayStartingIndexToRay(GlobalPosToRayStartingIndex(LocalPosToGlobal(LocalIndexToPos(localIndex, chunkTable), chunkPositionTable, chunkIndex), chunkIndex, chunkEdgeTable));
}

uint LocalRayToGlobalRay(uint localRayIndex, uint chunkIndex, RWStructuredBuffer<uint3> _chunkTable, RWStructuredBuffer<uint3> _chunkPositionTable, RWStructuredBuffer<uint> _chunkEdgeTable, RWStructuredBuffer<TriIndex> _edgeTable)
{
	return LocalIndexToRayIndex(LocalRayToBottom(localRayIndex, _edgeTable), chunkIndex, _chunkTable, _chunkPositionTable, _chunkEdgeTable);
}

//****************************************************************************************************************************************************************************************
//This section contains the methods used to pack the height values into buffer to save on memory

uint GlobalRayToAdjusted(uint globalRayIndex, uint chunkIndex, RWStructuredBuffer<uint3> chunkPositionTable)
{
    return globalRayIndex * e_chunkStepDepth + chunkPositionTable[chunkIndex].y;
}

uint GlobalRayToAdjusted(uint globalRayIndex, uint currentYChunk)
{
    return (globalRayIndex * e_chunkStepDepth) + currentYChunk;
}

uint LocalIndexToAdjustedIndex(uint localIndex, uint chunkIndex, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable)
{
	return GlobalRayToAdjusted(LocalIndexToRayIndex(localIndex, chunkIndex, chunkTable, chunkPositionTable, chunkEdgeTable), chunkIndex, chunkPositionTable);
}

uint AdjustedToArray(uint adjustedIndex, uint packedSize)
{
	return floor(adjustedIndex / packedSize);
}

uint AdjustedToBit(uint adjustedIndex, uint packedSize, uint sizeInBits)
{
    return (adjustedIndex % packedSize) * sizeInBits;
}

void LocalVisCalcs(uint localIndex, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint> heightTransferBuffer, RWStructuredBuffer<uint> solidTransferBuffer, RWStructuredBuffer<TriIndex> edgeTable)
{
	if ((meshProperties[localIndex].lowIndex & 0xFFF) != 0)
	{
		InterlockedMin(heightTransferBuffer[LocalIndexToLocalRay(localIndex, edgeTable)], chunkTable[localIndex].y);
		InterlockedOr(solidTransferBuffer[LocalIndexToLocalRay(localIndex, edgeTable)], 1U);
	}
}


//**********************************************************************************************************************************************************
//This section under work

//returns the value of any global buffer
uint GetGlobalValue(uint adjustedIndex, uint packedSize, uint sizeInBits, uint comparison, RWStructuredBuffer<uint> globalBuffer)
{
    return (globalBuffer[AdjustedToArray(adjustedIndex, packedSize)] >> AdjustedToBit(adjustedIndex, packedSize, sizeInBits)) & comparison;
}

//Clears the bits of any global buffer based on a given arrayIndex and bit index.
uint ClearBits(uint tempGlobal, uint bitIndex, uint comparison)
{
    uint clear = ~(comparison << bitIndex);
	
    return tempGlobal & clear;
}

//Create a temporary sequence that could possibly be stored into the global buffer
uint TempSetHeight(uint bitIndex, uint tempGlobal, uint transferHeight)
{
    return ClearBits(tempGlobal, bitIndex, s_heightComparison) | (transferHeight << bitIndex);
}

void SetGlobalHeight(uint adjustedIndex, uint arrayIndex, uint bitIndex, uint localRayIndex, RWStructuredBuffer<uint> _heightTransferBuffer, RWStructuredBuffer<uint> _globalHeightTable)
{
    if (GetGlobalValue(adjustedIndex, e_heightPackedSize, e_heightSizeInBits, s_heightComparison, _globalHeightTable) > _heightTransferBuffer[localRayIndex])
    {
        while (true)
        {
            uint temp = _globalHeightTable[arrayIndex];
            uint prev;
            InterlockedCompareExchange(_globalHeightTable[arrayIndex], temp, TempSetHeight(bitIndex, temp, _heightTransferBuffer[localRayIndex]), prev);
			
            if (prev == temp)
            {
                return;
            }
			
        }
    }
}

 void LocalToGlobalTransfer(uint adjustedIndex, uint localRayIndex, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<uint> heightTransferBuffer, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<uint> solidTransferBuffer)
{
    //InterlockedOr(globalHeightTable[AdjustedToArray(adjustedIndex, e_heightPackedSize)], heightTransferBuffer[localRayIndex] << AdjustedToBit(adjustedIndex, e_heightPackedSize, e_heightSizeInBits));
	
    SetGlobalHeight(adjustedIndex, AdjustedToArray(adjustedIndex, e_heightPackedSize), AdjustedToBit(adjustedIndex, e_heightPackedSize, e_heightSizeInBits), localRayIndex, heightTransferBuffer, globalHeightTable);
	
    InterlockedOr(globalSolidBuffer[AdjustedToArray(adjustedIndex, e_solidPackedSize)], solidTransferBuffer[localRayIndex] << AdjustedToBit(adjustedIndex, e_solidPackedSize, e_solidSizeInBits));
}

//********************************************************************************************************************************************************
//Transfer the locally calculated rays from the temp buffer to the global buffer
void TransferToGlobalBuffer(uint localRayIndex, uint chunkIndex, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint> heightTransferBuffer, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<uint> solidTransferBuffer)
{
	LocalToGlobalTransfer(LocalIndexToAdjustedIndex(LocalRayToBottom(localRayIndex, edgeTable), chunkIndex, chunkTable, chunkPositionTable, chunkEdgeTable), localRayIndex, globalHeightTable, heightTransferBuffer, globalSolidBuffer, solidTransferBuffer);
}

//Test overloads ignore
void LocalToGlobalTransfer(uint adjustedIndex, uint localRayIndex, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<uint> solidTransferBuffer)
{
	InterlockedOr(globalSolidBuffer[AdjustedToArray(adjustedIndex, e_solidPackedSize)], solidTransferBuffer[localRayIndex] << AdjustedToBit(adjustedIndex, e_solidPackedSize, e_solidSizeInBits));
}
void TransferToGlobalBuffer(uint localRayIndex, uint chunkIndex, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<uint> solidTransferBuffer)
{
	LocalToGlobalTransfer(LocalIndexToAdjustedIndex(LocalRayToBottom(localRayIndex, edgeTable), chunkIndex, chunkTable, chunkPositionTable, chunkEdgeTable), localRayIndex, globalSolidBuffer, solidTransferBuffer);
}



//*******************************************************************************************************************************************************************************************
//Final Visibility methods
//use for testing, can be replaced with s_shadowComparisons
/*
uint CreateShadowComparison(uint difference)
{
	uint comparison = 0;
	for (uint i = 0; i < difference; i++)
	{
        comparison |= (1U << (e_chunkStepDepth - i));
    }

	return comparison;
}

//returns the difference between the y position of the current chunk and the maximum number of y chunks.
//note adjustment to chunkStepDepth
uint StepDifference(uint chunkIndex, RWStructuredBuffer<uint3> chunkPositionTable)
{
    return (e_chunkStepDepth - 1) - chunkPositionTable[chunkIndex].y;
}

//global method to determine whether a chunk is in shadow
bool InShadow(uint adjustedIndex, uint chunkIndex, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<uint3> chunkPositionTable)
{
	return GetGlobalValue(adjustedIndex, e_solidPackedSize, e_solidSizeInBits, CreateShadowComparison(StepDifference(chunkIndex, chunkPositionTable)), globalSolidBuffer) > 0;
}
*/

//returns the greatest chunk less than or equal to the current chunkIndex position
uint GreatestStep(uint globalRayIndex, uint currentYChunk, RWStructuredBuffer<uint> globalSolidBuffer)
{
	for (int i = currentYChunk; i > -1; i--)
	{
        if (GetGlobalValue(GlobalRayToAdjusted(globalRayIndex, i), e_solidPackedSize, e_solidSizeInBits, s_solidComparison, globalSolidBuffer) == 1)
		{
			return i;
		}
	}

	//will only reach this point if the there are no solids at or below the chunk y level
    return e_chunkStepDepth + 1;
}


//Return which chunk in the ray progression is visible, only one chunk can be visible at a time
void GlobalVisCalc(uint globalRayIndex, uint adjustedIndex, uint crossYChunk, uint trueCrossHeight, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<KeyValue> _hashTransferBuffer)
{
    if (trueCrossHeight < (GetGlobalValue(adjustedIndex, e_heightPackedSize, e_heightSizeInBits, s_heightComparison, globalHeightTable) + (crossYChunk * height)))
	{
		HashInsert(_hashTransferBuffer, globalRayIndex, GreatestStep(globalRayIndex, crossYChunk - 1, globalSolidBuffer));
	}
	else
	{
		HashInsert(_hashTransferBuffer, globalRayIndex, GreatestStep(globalRayIndex, crossYChunk, globalSolidBuffer));
	}
}

bool FinalCheck(uint globalRayIndex, uint currentYLevel, RWStructuredBuffer<KeyValue> hashTransferBuffer)
{
    uint visInfo = HashLookup(hashTransferBuffer, globalRayIndex);
	
    if (((visInfo >> 4) & 1) == 0 && (visInfo & 15U) == currentYLevel)
    {
        HashInsert(HashTransferBuffer, globalRayIndex, (visInfo | (1 << 4)));
        return true;
    }
	else
    {
        return false;
    }
}
//************************************************************************

[numthreads(1, 1, 1)]
void ZeroCounter(uint3 id : SV_DispatchThreadID)
{
	_Counter[id.x] = 0;
}

[numthreads(1024, 1, 1)]
void ClearMeshProperties(uint3 id : SV_DispatchThreadID)
{
    _MeshProperties[id.x].lowIndex &= 0xFFF;
}

[numthreads(1024, 1, 1)]
void InitializeDummyChunks(uint3 id : SV_DispatchThreadID)
{
	_DummyChunkOne[id.x] = 0;
	_DummyChunkTwo[id.x] = 0;
	_AltDummyChunk[id.x].lowIndex = 0;
}

[numthreads(1024, 1, 1)]
void InitializeChunkVisibilityTable(uint3 id : SV_DispatchThreadID)
{
	_ChunkVisibilityTables[id.x] = 15;
}

[numthreads(1024, 1, 1)]
void InitializeGlobalHeightTable(uint3 id: SV_DispatchThreadID)
{
	_GlobalHeightTable[id.x] = 0;
}

[numthreads(1024, 1, 1)]
void InitializeGlobalSolidBuffer(uint3 id: SV_DispatchThreadID)
{
	GlobalSolidBuffer[id.x] = 0;
}

[numthreads(1024, 1, 1)]
void InitializeLocalTransferBuffers(uint3 id: SV_DispatchThreadID)
{
	HeightTransferBuffer[id.x] = 15U;
	SolidTransferBuffer[id.x] = 0;
}

[numthreads(1024, 1, 1)]
void InitializeHashTransferBuffer(uint3 id: SV_DispatchThreadID)
{
	if (id.x < e_hashBufferSize)
	{
		HashTransferBuffer[id.x].key = 0xffffffff;
		HashTransferBuffer[id.x].value = 0xffffffff;
	}
}

[numthreads(1024, 1, 1)]
void InitializeCubes(uint3 id : SV_DispatchThreadID)
{
	//Ensure the table is wiped
	_EdgeTable[id.x].lowIndex = 0;
	_EdgeTable[id.x].highIndex = 0;
	_EdgeTable[id.x].thirdIndex = 0;

	//fill the reference table
	_ChunkTable[id.x] = IndexToPosition(id.x, height, width);
	//call the edgeCheck method
	_EdgeTable[id.x].lowIndex = LocalEdgeChecks(id.x, _ChunkTable);
}

[numthreads(1024, 1, 1)]
void InitializeChunks(uint3 id : SV_DispatchThreadID)
{
	_ChunkEdgeTable[id.x] = 0;

	_ChunkPositionTable[id.x] = IndexToPosition(id.x, yChunks, zChunks);
	_ChunkEdgeTable[id.x] = ChunkEdgeChecks(id.x, _ChunkPositionTable);
}

[numthreads(1, 1, 1)]
void SingleThread(uint3 id : SV_DispatchThreadID)
{
	uint count = 0;
	for (uint i = 0; i < cubeCount; i++)
	{
		if (_ChunkTable[i].x == 0 || _ChunkTable[i].y == 0 || _ChunkTable[i].z == 0)
		{
			_TempTable[i] = count;
			count++;
		}
	}
}

[numthreads(1024, 1, 1)]
void InitializeRays(uint3 id : SV_DispatchThreadID)
{
	rayCalc(_EdgeTable, _TempTable, id.x);
}

[numthreads(1024, 1, 1)]
void InitializeRaysTwo(uint3 id : SV_DispatchThreadID)
{
	rayCalcTwo(_EdgeTable, _TempTable, id.x);
}

[numthreads(1024, 1, 1)]
void Noise(uint3 id : SV_DispatchThreadID)
{
	//Ensure the Mesh table is wiped
	_MeshProperties[id.x].lowIndex = 0;
	_MeshProperties[id.x].highIndex = 0;

	if(noise((_ChunkTable[id.x] + uint3(xOffset, yOffset, zOffset)) * 0.1) >= .45)
	{
		//this will need to be revisted later for more complex world gen
		_MeshProperties[id.x].lowIndex = 1;
	}
	else
	{
		_MeshProperties[id.x].lowIndex = 1;
	}
}

//method to check other algorithm
[numthreads(1024, 1, 1)]
void CheckFaces(uint3 id : SV_DispatchThreadID)
{
	if (_MeshProperties[id.x].lowIndex != 0 && (_MeshProperties[id.x + 1].lowIndex == 0 || _MeshProperties[id.x - 1].lowIndex == 0
		|| _MeshProperties[id.x + width].lowIndex == 0 || _MeshProperties[id.x - width].lowIndex == 0
		|| _MeshProperties[id.x + width * height].lowIndex == 0 || _MeshProperties[id.x - width * height].lowIndex == 0
		|| _ChunkTable[id.x].y == 0 || _ChunkTable[id.x].y == height - 1 || _ChunkTable[id.x].z == 0 || _ChunkTable[id.x].z == width - 1))
	{
		InterlockedAdd(_Counter[0], 1);
		_MeshProperties[id.x].lowIndex |= 1U << 12;
	}
	else
	{
		_MeshProperties[id.x].lowIndex &= ~(1U << 12);
	}
}

[numthreads(1024, 1, 1)]
void PopulateRender(uint3 id : SV_DispatchThreadID)
{
	if (topEdge)
	{
		if (((_MeshProperties[id.x].highIndex >> 14) & 1U) == 1)
		{
			_RenderProperties.Append(id.x + ((_MeshProperties[id.x].lowIndex & 0xFFF) << 16));
		}
	}
	else
	{
		if (((_MeshProperties[id.x].lowIndex >> 12) & 1U) == 1)
		{
			_RenderProperties.Append(id.x + ((_MeshProperties[id.x].lowIndex & 0xFFF) << 16));
		}
	}
}

//retarded but ok
[numthreads(1024, 1, 1)]
void ChunkVisibilityTable(uint3 id: SV_DispatchThreadID)
{
	//calcChunkVis(_MeshProperties, _ChunkTable, _ChunkVisibilityTables, _EdgeTable, id.x);

	LocalVisCalcs(id.x, _MeshProperties, _ChunkTable, HeightTransferBuffer, SolidTransferBuffer, _EdgeTable);
}

[numthreads(1024, 1, 1)]
void ChunkVisibilityTableTwo(uint3 id: SV_DispatchThreadID)
{
	calcChunkVisTwo(_MeshProperties, _ChunkTable, _ChunkVisibilityTables, _EdgeTable, id.x);
}

//transfer the results of the local vis calcs to the global buffers
[numthreads(1024, 1, 1)]
void TransferGlobalHeights(uint3 id: SV_DispatchThreadID)
{
	TransferToGlobalBuffer(id.x, chunkIndex, _ChunkTable, HeightTransferBuffer, _GlobalHeightTable, _EdgeTable, _ChunkPositionTable, _ChunkEdgeTable, GlobalSolidBuffer, SolidTransferBuffer);
}

//the smallest number of threads equaual or greater than the outer shell
//finds the chunk of equal to or less than the current localCrossHeight
[numthreads(768, 1, 1)]
void GlobalShadowCalcs(uint3 id : SV_DispatchThreadID)
{
	if(id.x < leadingEdgeCount)
	{
		uint globalRay = LocalRayToGlobalRay(id.x, chunkIndex, _ChunkTable, _ChunkPositionTable, _ChunkEdgeTable, _EdgeTable);
		GlobalVisCalc(globalRay, GlobalRayToAdjusted(globalRay, chunkIndex, _ChunkPositionTable), e_crossYChunk, e_trueCrossHeight, _GlobalHeightTable, GlobalSolidBuffer, HashTransferBuffer);
    }
}

[numthreads(768, 1, 1)]
void FinalCull(uint3 id : SV_DispatchThreadID)
{
	if(id.x < leadingEdgeCount)
	{
        uint globalRayIndex = LocalRayToGlobalRay(id.x, chunkIndex, _ChunkTable, _ChunkPositionTable, _ChunkEdgeTable, _EdgeTable);
        
        if (FinalCheck(globalRayIndex, currentYChunk, HashTransferBuffer))
		{
            //calculateVisibility(_Counter, _MeshProperties, _EdgeTable, LocalRayToTop(id.x, _EdgeTable), true, true, 0);
            FinalVisCalc(id.x, e_localCrossHeight, currentYChunk, e_crossYChunk, _EdgeTable, _MeshProperties, _Counter, _ChunkTable);
        }
	}
}






[numthreads(1024, 1, 1)]
void ChunkGlobalVis(uint3 id : SV_DispatchThreadID)
{
	uint index = round(id.x % 1024);
	uint chunkHeight = round(floor(id.x / 1024));

	if (index < leadingEdgeCount)
	{
		switch (_EdgeTable[_EdgeTable[index].highIndex >> 13].lowIndex & 0x7)
		{
		case 0:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _DiagonalTopChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 1:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _TopLeftChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 4:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _TopRightChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 5:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _MiddleTopChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		}
	}
}

[numthreads(1024, 1, 1)]
void ChunkGlobalVisTwo(uint3 id : SV_DispatchThreadID)
{
	uint index = round(id.x % 1024);
	uint chunkHeight = round(floor(id.x / 1024));

	if (index < leadingEdgeCount)
	{
		switch (_EdgeTable[_EdgeTable[index].highIndex >> 13].lowIndex & 0x7)
		{
		case 2:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _DiagonalMiddleChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 3:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _MiddleLeftChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 6:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _MiddleRightChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		}
	}
}


[numthreads(1024, 1, 1)]
void StupidCull(uint3 id: SV_DispatchThreadID)
{
	_MeshProperties[id.x].lowIndex &= 0xFFF;
	_MeshProperties[id.x].highIndex = 0;

	uint bitIndex = currentYChunk + 5;
	bool visibilityCheck = false;
	bool skip = 1;

	switch (_EdgeTable[id.x].lowIndex & 0x7)
	{
	case 0:
		visibilityCheck = CalcLocalVis(_EdgeTable, _DiagonalTopChunk, visibilityCheck, id.x, bitIndex, topOffset, trueHeight);
		break;
	case 1:
		visibilityCheck = CalcLocalVis(_EdgeTable, _TopLeftChunk, visibilityCheck, id.x, bitIndex, topOffset, trueHeight);
		break;
	case 4:
		visibilityCheck = CalcLocalVis(_EdgeTable, _TopRightChunk, visibilityCheck, id.x, bitIndex, topOffset, trueHeight);
		break;
	case 5:
		visibilityCheck = CalcLocalVis(_EdgeTable, _MiddleTopChunk, visibilityCheck, id.x, bitIndex, topOffset, trueHeight);
		break;
	default:
		skip = 0;
		break;
	}
	
	calculateVisibilityHighIndex(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, 14);
}

//this is retarded but necessary because of buffer limit
[numthreads(1024, 1, 1)]
void StupidCull2(uint3 id: SV_DispatchThreadID)
{
	bool visibilityCheck = false;
	bool skip = 1;

	uint bitIndex = currentYChunk + 5;

	switch (_EdgeTable[id.x].lowIndex & 0x7)
	{
	case 2:
		visibilityCheck = CalcLocalVis(_EdgeTable, _DiagonalMiddleChunk, visibilityCheck, id.x, bitIndex, sameLevelOffset, trueHeight);
		break;
	case 3:
		visibilityCheck = CalcLocalVis(_EdgeTable, _MiddleLeftChunk, visibilityCheck, id.x, bitIndex, sameLevelOffset, trueHeight);
		break;
	case 6:
		visibilityCheck = CalcLocalVis(_EdgeTable, _MiddleRightChunk, visibilityCheck, id.x, bitIndex, sameLevelOffset, trueHeight);
		break;
	default:
		skip = 0;
		break;
	}
	calculateVisibilityHighIndex(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, 14);
}

[numthreads(1024, 1, 1)]
void CoolCull(uint3 id : SV_DispatchThreadID)
{
	_MeshProperties[id.x].lowIndex &= 0xFFF;
	_MeshProperties[id.x].highIndex = 0;

	if (_ChunkTable[id.x].y <= e_localCrossHeight)
	{
		if (_ChunkTable[id.x].y == e_localCrossHeight || ((_EdgeTable[id.x].lowIndex >> s_localEdgeLeadingSides) & 1U) == 1)
		{
			bool visibilityCheck = false;
			bool skip = 1;

			switch (_EdgeTable[id.x].lowIndex & 0x7)
			{
			case 0:
				visibilityCheck = true;
				break;
			case 1:
				visibilityCheck = true;
				break;
			case 2:
				visibilityCheck = ((_IntDiagonalMiddleChunk[(_EdgeTable[id.x].lowIndex >> s_localEdgeNextIndex) & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 3:
				visibilityCheck = ((_IntMiddleLeftChunk[(_EdgeTable[id.x].lowIndex >> s_localEdgeNextIndex) & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 4:
				visibilityCheck = true;
				break;
			case 5:
				visibilityCheck = true;
				break;
			case 6:
				visibilityCheck = ((_IntMiddleRightChunk[(_EdgeTable[id.x].lowIndex >> s_localEdgeNextIndex) & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 7:
				visibilityCheck = true;
				break;
			default:
				skip = 0;
				break;
			}

			/*
			switch (_EdgeTable[id.x].lowIndex & 0x7)
			{
			case 0:
				visibilityCheck = true;
				break;
			case 1:
				visibilityCheck = true;
				break;
			case 2:
				visibilityCheck = ((_IntDiagonalMiddleChunk[_EdgeTable[_EdgeTable[_EdgeTable[id.x].lowIndex >> 17].thirdIndex].highIndex & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 3:
				visibilityCheck = ((_IntMiddleLeftChunk[_EdgeTable[_EdgeTable[_EdgeTable[id.x].lowIndex >> 17].thirdIndex].highIndex & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 4:
				visibilityCheck = true;
				break;
			case 5:
				visibilityCheck = true;
				break;
			case 6:
				visibilityCheck = ((_IntMiddleRightChunk[_EdgeTable[_EdgeTable[_EdgeTable[id.x].lowIndex >> 17].thirdIndex].highIndex & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 7:
				visibilityCheck = true;
				break;
			default:
				skip = 0;
				break;
			}
			*/

			calculateVisibility(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, 0);
		}
	}
}

[numthreads(768, 1, 1)]
void LowVis(uint3 id : SV_DispatchThreadID)
{
	
}

[numthreads(768, 1, 1)]
void BottomLeftVis(uint3 id : SV_DispatchThreadID)
{
	
}

[numthreads(768, 1, 1)]
void BottomRightVis(uint3 id : SV_DispatchThreadID)
{
	
}

[numthreads(768, 1, 1)]
void CenterBottomVis(uint3 id : SV_DispatchThreadID)
{
	
}

[numthreads(768, 1, 1)]
void DiagonalMiddleVis(uint3 id : SV_DispatchThreadID)
{
	
}

[numthreads(768, 1, 1)]
void MiddleLeftVis(uint3 id : SV_DispatchThreadID)
{
	
}

[numthreads(768, 1, 1)]
void MiddleRightVis(uint3 id : SV_DispatchThreadID)
{
	
}

	

	
