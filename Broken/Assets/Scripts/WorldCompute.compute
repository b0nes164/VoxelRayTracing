#pragma kernel ClearCounter
#pragma kernel ClearMeshProperties
#pragma kernel InitializeGlobalHeightBuffer
#pragma kernel InitializeGlobalSolidBuffer
#pragma kernel InitializeLocalTransferBuffers
#pragma kernel InitializeHashTransferBuffer
#pragma kernel InitializeLocalReference
#pragma kernel InitializeChunkReference
#pragma kernel SingleThread
#pragma kernel InitializeRayReference
#pragma kernel Noise
#pragma kernel CheckFaces
#pragma kernel PopulateRender 
#pragma kernel LocalVisibilityCalcs
#pragma kernel TransferToGlobal
#pragma kernel FullVisCalcs
#pragma kernel FullCull


struct KeyValue
{
	uint key;
	uint value;
};

struct DualIndex
{
	uint lowIndex;
	uint highIndex;
};

struct TriIndex
{
	uint lowIndex;
	uint highIndex;
	uint thirdIndex;
};

RWStructuredBuffer<uint> _ChunkEdgeTable;
RWStructuredBuffer<uint3> _ChunkPositionTable;
RWStructuredBuffer<uint3> _LocalPositionBuffer;
RWStructuredBuffer<TriIndex> _LocalEdgeBuffer;

RWStructuredBuffer<DualIndex> _TempTable;

RWStructuredBuffer<uint> _ChunkVisibilityTables;

RWStructuredBuffer<DualIndex> _MeshProperties;
RWStructuredBuffer<int> _Counter;
AppendStructuredBuffer<uint> _RenderProperties;

RWStructuredBuffer<uint> HeightTransferBuffer;
RWStructuredBuffer<uint> SolidTransferBuffer;
RWStructuredBuffer<KeyValue> HashTransferBuffer;

RWStructuredBuffer<uint> _GlobalHeightTable;
RWStructuredBuffer<uint> GlobalSolidBuffer;
RWStructuredBuffer<uint> _GlobalShadowTable;

RWStructuredBuffer<uint> _ChunkVisibility;

RWStructuredBuffer<uint> BugBuffer;

//These are just references for the cull method.
StructuredBuffer<uint> _DiagonalTopChunk;
StructuredBuffer<uint> _TopLeftChunk;
StructuredBuffer<uint> _DiagonalMiddleChunk;
StructuredBuffer<uint> _MiddleLeftChunk;
StructuredBuffer<uint> _TopRightChunk;
StructuredBuffer<uint> _MiddleTopChunk;
StructuredBuffer<uint> _MiddleRightChunk;

extern uint e_localChunkSize;
extern uint e_stepIndex;

extern uint e_xChunks;
extern uint e_yChunks;
extern uint e_zChunks;

extern uint e_length;
extern uint e_height;
extern uint e_width;

extern uint e_leadingEdgeCount;
extern uint e_globalLength;
extern uint e_globalHeight;
extern uint e_globalWidth;

extern uint e_globalStepIndex;
extern uint e_chunkStepDepth;

extern uint e_heightPackedSize;
extern uint e_solidPackedSize;
extern uint e_heightSizeInBits;
extern uint e_solidSizeInBits;

extern uint e_xOffset;
extern uint e_yOffset;
extern uint e_zOffset;

extern int e_activeDepth;

//the y level of the current cross
extern uint e_crossYChunk;
// size of the hashBuffer
extern uint e_hashBufferSize;

extern uint e_trueCrossHeight;

extern bool topEdge;
extern uint e_localCrossHeight;
extern uint trueHeight;
extern uint currentYChunk;
extern uint chunkIndex;
extern uint topOffset;
extern uint sameLevelOffset;

//hashbuffer sentinel empty value
static uint s_empty = 0xffffffff;

static uint s_heightComparison = 15U;

static uint s_solidComparison = 1U;
//**************************************************
//Bit index values.
//LocalEdgeTable 0-2 Leading Face identifier, 3-5 Trailing Face identifier, 6 leading sides identifer, 7-18 corresponding index in adjacent chunk, 19-30 corresponding ray index from any local index. 
static uint s_localEdgeTrailingFace = 3;
static uint s_localEdgeLeadingSides = 6;
static uint s_localEdgeNextIndex = 7;
static uint s_localEdgeRayIndex = 19;

//ChunkEdgeTable 0-2 Leading Face identifier, 3-5 Trailing Face identifier
static uint s_chunkEdgeTrailingFace = 3;

//************************************************************************************************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************************************************************************************************
//Section Contains functions needed to generate noise

//*************************************************************************************
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// Added 5/2/2021
float3 mod289(float3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x) {
	return mod289(((x * 34.0) + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
	return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
	const float2  C = float2(1.0 / 6.0, 1.0 / 3.0);
	const float4  D = float4(0.0, 0.5, 1.0, 2.0);

	// First corner
	float3 i = floor(v + dot(v, C.yyy));
	float3 x0 = v - i + dot(i, C.xxx);

	// Other corners
	float3 g = step(x0.yzx, x0.xyz);
	float3 l = 1.0 - g;
	float3 i1 = min(g.xyz, l.zxy);
	float3 i2 = max(g.xyz, l.zxy);

	//   x0 = x0 - 0.0 + 0.0 * C.xxx;
	//   x1 = x0 - i1  + 1.0 * C.xxx;
	//   x2 = x0 - i2  + 2.0 * C.xxx;
	//   x3 = x0 - 1.0 + 3.0 * C.xxx;
	float3 x1 = x0 - i1 + C.xxx;
	float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

  // Permutations
	i = mod289(i);
	float4 p = permute(permute(permute(
		i.z + float4(0.0, i1.z, i2.z, 1.0))
		+ i.y + float4(0.0, i1.y, i2.y, 1.0))
		+ i.x + float4(0.0, i1.x, i2.x, 1.0));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	float n_ = 0.142857142857; // 1.0/7.0
	float3  ns = n_ * D.wyz - D.xzx;

	float4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	float4 x_ = floor(j * ns.z);
	float4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

	float4 x = x_ * ns.x + ns.yyyy;
	float4 y = y_ * ns.x + ns.yyyy;
	float4 h = 1.0 - abs(x) - abs(y);

	float4 b0 = float4(x.xy, y.xy);
	float4 b1 = float4(x.zw, y.zw);

	//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	float4 s0 = floor(b0) * 2.0 + 1.0;
	float4 s1 = floor(b1) * 2.0 + 1.0;
	float4 sh = -step(h, float4(0, 0, 0, 0));

	float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

	float3 p0 = float3(a0.xy, h.x);
	float3 p1 = float3(a0.zw, h.y);
	float3 p2 = float3(a1.xy, h.z);
	float3 p3 = float3(a1.zw, h.w);

	//Normalise gradients
	float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
	m = m * m;
	return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1),
		dot(p2, x2), dot(p3, x3)));
}

float rand(float n)
{
	return frac(sin(n)*43758.5453);
}

float noise(float3 x)
{
	// The noise function returns a value in the range -1.0f -> 1.0f

	float3 p = floor(x);
	float3 f = frac(x);

	f = f * f*(3.0 - 2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp(rand(n + 0.0), rand(n + 1.0), f.x),
		lerp(rand(n + 57.0), rand(n + 58.0), f.x), f.y),
		lerp(lerp(rand(n + 113.0), rand(n + 114.0), f.x),
			lerp(rand(n + 170.0), rand(n + 171.0), f.x), f.y), f.z);
}
//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
// This section contains methods and functions relating to the Hash Table

//*************************************************************************************
// Murmurhash3 32Bit Hash Function
// Author: Austin Appleby
// Lastmod: 1/8/2016
// Liscence: MIT Liscence
// Added 8/4/2021

uint hash(uint k)
{
	k ^= k >> 16;
	k *= 0x85ebca6b;
	k ^= k >> 13;
	k *= 0xc2b2ae35;
	k ^= k >> 16;
	return k & (e_hashBufferSize - 1);
}

//*************************************************************************************
// Hash Table Functions
// Author: David Farell, Translated to HLSL by me
// Lastmod: 8/4/2021
// Liscence: Unliscence
// Added: 8/4/2021

void HashInsert(RWStructuredBuffer<KeyValue> _hashBuffer, uint key, uint value)
{
    uint slot = hash(key);

    while (true)
    {
        uint prev;

        InterlockedCompareExchange(_hashBuffer[slot].key, s_empty, key, prev);

        if (prev == s_empty || prev == key)
        {
            _hashBuffer[slot].value = value;
            return;
        }

        slot = (slot + 1) & (e_hashBufferSize - 1);
    }
}

uint HashLookup(RWStructuredBuffer<KeyValue> _hashBuffer, uint key)
{
    uint slot = hash(key);

    while (true)
    {
        if (_hashBuffer[slot].key == key)
        {
            return _hashBuffer[slot].value;
        }
        if (_hashBuffer[slot].key == s_empty)
        {
            return s_empty;
        }

        slot = (slot + 1) & (e_hashBufferSize - 1);
    }
}

void HashDelete(RWStructuredBuffer<KeyValue> _hashBuffer, uint key)
{
    uint slot = hash(key);

    while (true)
    {
        if (_hashBuffer[slot].key == s_empty)
        {
            return;
        }
        if (_hashBuffer[slot].key == key)
        {
            _hashBuffer[slot].value = s_empty;
            return;
        }
        slot = (slot + 1) & (e_hashBufferSize - 1);
    }
}
//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
// This section contains the methods used to create the Reference Edge Table

//returns if an index is on its leading edge
bool IsOnLeadingEdge(uint value, uint dimension)
{
	return value == (dimension - 1);
}

//returns if an index is on the trailing edge
bool IsOnTrailingEdge(uint value)
{
	return value == 0;
}

//converts index to the x coordinate in any sytem
uint IndexToXPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return round(floor(index / (dimensionY * dimensionZ)));
}

//converts index to the y coordinate in any sytem
uint IndexToYPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return round(floor(index / dimensionZ) % dimensionY);
}

//converts index to the z coordinate in any system
uint IndexToZPosition(uint index, uint dimensionZ)
{
	return round(index % dimensionZ);
}
//translates any index to a position
uint3 IndexToPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return uint3(IndexToXPosition(index, dimensionY, dimensionZ), IndexToYPosition(index, dimensionY, dimensionZ), IndexToZPosition(index, dimensionZ));
}

//Returns the smallest dimension from (x,y,z)
uint LimitingDim(uint3 pos)
{
    return min(min(pos.x, pos.y), pos.z);
}

//edge check specific to the local level
uint LocalEdgeChecks(uint localIndex, RWStructuredBuffer<uint3> localPositionBuffer)
{
    bool isTop = IsOnLeadingEdge(localPositionBuffer[localIndex].y, e_height);
    bool isLeft = IsOnLeadingEdge(localPositionBuffer[localIndex].x, e_length);
    bool isRight = IsOnLeadingEdge(localPositionBuffer[localIndex].z, e_width);
	uint edgeCase;

	if (isLeft)
	{
		if (isTop)
		{
			if (isRight)
			{
				//this is the single index for the leading corner of the chunk
				edgeCase = 0;

				edgeCase |= (1U << s_localEdgeLeadingSides);

				//store the adjacent index for this case
                edgeCase |= (localIndex - (e_localChunkSize - 1)) << s_localEdgeNextIndex;
            }
			else
			{
				//Top Left
				edgeCase = 1;

				edgeCase |= (1U << s_localEdgeLeadingSides);

                edgeCase |= (localIndex - (e_localChunkSize - (e_width + 1))) << s_localEdgeNextIndex;
            }
		}
		else
		{
			if (isRight)
			{
				//Diagonal Middle
				edgeCase = 2;

				edgeCase |= (1U << s_localEdgeLeadingSides);

                edgeCase |= (localIndex - (e_localChunkSize - ((e_width * e_height) + 1))) << s_localEdgeNextIndex;
            }
			else
			{
				//Middle Left
				edgeCase = 3;

				edgeCase |= (1U << s_localEdgeLeadingSides);

                edgeCase |= (localIndex - (e_localChunkSize - ((e_width * e_height) + e_width))) << s_localEdgeNextIndex;
            }
		}
	}
	else
	{
		if (isTop)
		{
			if (isRight)
			{
				//Top Right
				edgeCase = 4;

				edgeCase |= (1U << s_localEdgeLeadingSides);

				edgeCase |= (localIndex + 1) << s_localEdgeNextIndex;
			}
			else
			{
				//Top Middle
				edgeCase = 5;

                edgeCase |= (localIndex + e_width + 1) << s_localEdgeNextIndex;
            }
		}
		else
		{
			if (isRight)
			{
				//Middle Right
				edgeCase = 6;

				edgeCase |= (1U << s_localEdgeLeadingSides);

                edgeCase |= (localIndex + (e_width * e_height) + 1) << s_localEdgeNextIndex;
            }
			else
			{
				edgeCase = 7;
			}
		}
	}

    bool isBottom = IsOnTrailingEdge(localPositionBuffer[localIndex].y);
    bool isTrailingRight = IsOnTrailingEdge(localPositionBuffer[localIndex].x);
    bool isTrailingLeft = IsOnTrailingEdge(localPositionBuffer[localIndex].z);

	if (isBottom)
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//bottom cube, the 0th index
				edgeCase |= (0 << s_localEdgeTrailingFace);
			}
			else
			{
				//bottom left
				edgeCase |= (1 << s_localEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//bottom right
				edgeCase |= (2 << s_localEdgeTrailingFace);
			}
			else
			{
				//center bottom
				edgeCase |= (3 << s_localEdgeTrailingFace);
			}
		}
	}
	else
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//diagonal middle
				edgeCase |= (4 << s_localEdgeTrailingFace);
			}
			else
			{
				//middle left
				edgeCase |= (5 << s_localEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//middle right
				edgeCase |= (6 << s_localEdgeTrailingFace);
			}
			else
			{
				//not on the trailing face
				edgeCase |= (7 << s_localEdgeTrailingFace);
			}
		}
	}

	return edgeCase;
}

//edge check specific to the chunk level
uint ChunkEdgeChecks(uint localIndex, RWStructuredBuffer<uint3> chunkPositionTable)
{
	bool isTop = IsOnLeadingEdge(chunkPositionTable[localIndex].y, e_yChunks);
	bool isLeft = IsOnLeadingEdge(chunkPositionTable[localIndex].x, e_xChunks);
	bool isRight = IsOnLeadingEdge(chunkPositionTable[localIndex].z, e_zChunks);
	uint edgeCase;

	if (isLeft)
	{
		if (isTop)
		{
			if (isRight)
			{
				//this is the single index for the leading corner of the chunk
				edgeCase = 0;
			}
			else
			{
				//Top Left
				edgeCase = 1;
			}
		}
		else
		{
			if (isRight)
			{
				//Diagonal Middle
				edgeCase = 2;
			}
			else
			{
				//Middle Left
				edgeCase = 3;
			}
		}
	}
	else
	{
		if (isTop)
		{
			if (isRight)
			{
				//Top Right
				edgeCase = 4;
			}
			else
			{
				//Top Middle
				edgeCase = 5;
			}
		}
		else
		{
			if (isRight)
			{
				//Middle Right
				edgeCase = 6;
			}
			else
			{
				edgeCase = 7;
			}
		}
	}

	bool isBottom = IsOnTrailingEdge(chunkPositionTable[localIndex].y);
	bool isTrailingRight = IsOnTrailingEdge(chunkPositionTable[localIndex].x);
	bool isTrailingLeft = IsOnTrailingEdge(chunkPositionTable[localIndex].z);

	if (isBottom)
	{
		if(isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//bottom cube, the 0th index, just for my own reference
				edgeCase |= (0 << s_chunkEdgeTrailingFace);
			}
			else
			{
				//bottom left
				edgeCase |= (1 << s_chunkEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//bottom right
				edgeCase |= (2 << s_chunkEdgeTrailingFace);
			}
			else
			{
				//center bottom
				edgeCase |= (3 << s_chunkEdgeTrailingFace);
			}
		}
	}
	else
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//diagonal middle
				edgeCase |= (4 << s_chunkEdgeTrailingFace);
			}
			else
			{
				//middle left
				edgeCase |= (5 << s_chunkEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//middle right
				edgeCase |= (6 << s_chunkEdgeTrailingFace);
			}
			else
			{
				//not on the trailing face
				edgeCase |= (7 << s_chunkEdgeTrailingFace);
			}
		}
	}

	return edgeCase;
}

//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
//Edge Reference Table conversion sections

//these return the leading face case value
uint LeadingFace(RWStructuredBuffer<TriIndex> __localEdgeBuffer, uint __localIndex)
{
    return __localEdgeBuffer[__localIndex].lowIndex & 0x7;
}

uint IsLeadingFace(RWStructuredBuffer<TriIndex> _localEdgeBuffer, uint _localIndex)
{
    return LeadingFace(_localEdgeBuffer, _localIndex) != 7;
}

uint IsNotLeadingFace(RWStructuredBuffer<TriIndex> _localEdgeBuffer, uint _localIndex)
{
    return LeadingFace(_localEdgeBuffer, _localIndex) == 7;
}

//these return the trailing face case value
uint TrailingFace(RWStructuredBuffer<uint> __chunkEdgeTable, uint __chunkIndex)
{
	return (__chunkEdgeTable[__chunkIndex] >> s_chunkEdgeTrailingFace) & 0x7;
}
uint TrailingFace(RWStructuredBuffer<TriIndex> __localEdgeBuffer, uint __localIndex)
{
    return (__localEdgeBuffer[__localIndex].lowIndex >> s_localEdgeTrailingFace) & 0x7;
}

//these return wheather the given index is on the trailing face based on a lookup table
bool IsTrailingFace(RWStructuredBuffer<uint> _chunkEdgeTable, uint _chunkIndex)
{
	return TrailingFace(_chunkEdgeTable, _chunkIndex) != 7;
}
bool IsTrailingFace(RWStructuredBuffer<TriIndex> _localEdgeBuffer, uint _localIndex)
{
    return TrailingFace(_localEdgeBuffer, _localIndex) != 7;
}

bool IsNotTrailingFace(RWStructuredBuffer<TriIndex> _localEdgeBuffer, uint _localIndex)
{
    return TrailingFace(_localEdgeBuffer, _localIndex) == 7;
}

//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
// Ray Reference Table and Creation section

//Creates the lookup table for the following conversions: localIndex to localRayIndex; localRayIndex to Top, Bottom 
void rayCalc(RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<DualIndex> tempTable, RWStructuredBuffer<uint3> localPositionBuffer, uint index)
{
    if (IsTrailingFace(edgeTable, index))
	{
		uint tempIndex = index;

		edgeTable[tempIndex].lowIndex |= (tempTable[index].lowIndex << s_localEdgeRayIndex);
		edgeTable[tempTable[index].lowIndex].highIndex = tempIndex;
		
        while (IsNotLeadingFace(edgeTable, tempIndex))
		{
			tempIndex += e_stepIndex;
			edgeTable[tempIndex].lowIndex |= (tempTable[index].lowIndex << s_localEdgeRayIndex);
		}

		edgeTable[tempTable[index].lowIndex].highIndex |= tempIndex << 13;
		
        if(localPositionBuffer[tempIndex].y == e_height - 1)
        {
            edgeTable[tempTable[tempIndex].highIndex].thirdIndex = tempIndex;
        }
    }
}

//Returns the localIndex of the bottom of a local ray
uint LocalRayToBottom(uint __localRayIndex, RWStructuredBuffer<TriIndex> __localEdgeBuffer)
{
    return __localEdgeBuffer[__localRayIndex].highIndex & 4095U;
}

//Returns the localIndex of the top of a local ray
uint LocalRayToTop(uint __localRayIndex, RWStructuredBuffer<TriIndex> __localEdgeBuffer)
{
    return (__localEdgeBuffer[__localRayIndex].highIndex >> 13) & 4095U;
}

//returns the local ray index from a local index
uint LocalIndexToLocalRay(uint __localIndex, RWStructuredBuffer<TriIndex> __localEdgeBuffer)
{
    return __localEdgeBuffer[__localIndex].lowIndex >> s_localEdgeRayIndex;
}

uint TopIndexToLocalIndex(uint __topIndex, RWStructuredBuffer<TriIndex> __localEdgeBuffer)
{
    return __localEdgeBuffer[__topIndex].thirdIndex;
}

//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
// This contains the methods used to convert a given local index to a global ray index

uint3 LocalIndexToPos(uint _localIndex, RWStructuredBuffer<uint3> _localPositionBuffer)
{
    return _localPositionBuffer[_localIndex];
}

uint3 LocalPosToGlobal(uint3 localPos, RWStructuredBuffer<uint3> chunkPositionTable, uint chunkIndex)
{
    return uint3(localPos.x + (chunkPositionTable[chunkIndex].x * e_length), localPos.y + (chunkPositionTable[chunkIndex].y * e_height), localPos.z + (chunkPositionTable[chunkIndex].z * e_width));
}

uint GlobalPosToIndex(uint3 globalPos)
{
    return (globalPos.x * e_globalHeight * e_globalWidth) + (globalPos.y * e_globalWidth) + globalPos.z;
}

//Returns the starting of a ray in the "inner" case
uint InnerToStarting(uint globalIndex, uint3 globalPos)
{
    return globalIndex - (LimitingDim(globalPos) * e_globalStepIndex);
}

//returns the global index of the ray starting block.
uint GlobalIndexToRayStartingIndex(uint globalIndex, uint chunkIndex, uint3 globalPos, RWStructuredBuffer<uint> chunkEdgeTable)
{
	if (IsTrailingFace(chunkEdgeTable, chunkIndex))
	{
        if (globalIndex <= (e_globalHeight * e_globalWidth) - 1)
		{
			return globalIndex;
		}
		else
		{
			if (globalIndex % e_globalWidth == 0)
			{
				return globalIndex;
			}
			else
			{
                if (globalIndex % (e_globalWidth * e_globalHeight) <= e_globalWidth - 1U)
				{
					return globalIndex;
				}
				else
				{
					return InnerToStarting(globalIndex, globalPos);
				}
			}
		}
	}
	else
	{
		return InnerToStarting(globalIndex, globalPos);
	}
}

//intermediate function needed to pass the global pos
uint GlobalPosToRayStartingIndex(uint3 globalPos, uint chunkIndex, RWStructuredBuffer<uint> chunkEdgeTable)
{
	return GlobalIndexToRayStartingIndex(GlobalPosToIndex(globalPos), chunkIndex, globalPos, chunkEdgeTable);
}

//a clamping function used for the ray starting index
uint YClamp(uint valueIn)
{
	if (valueIn == 0)
	{
		return 0;
	}
	else
	{
		return valueIn - 1;
	}
}

//converts the global index position of the ray start to the ray index
uint RayStartingIndexToRay(uint rayStartingIndex)
{
    uint rayStartingX = IndexToXPosition(rayStartingIndex, e_globalHeight, e_globalWidth);
    uint rayStartingY = IndexToYPosition(rayStartingIndex, e_globalHeight, e_globalWidth);
	if (rayStartingX == 0)
	{
		return rayStartingIndex;
	}
	else
	{
        return rayStartingIndex - ((rayStartingX - 1) * (e_globalHeight - 1) * (e_globalWidth - 1) + (YClamp(rayStartingY)) * (e_globalWidth - 1));
    }
}

//Calls the above methods perform the conversion
uint LocalIndexToGlobalRay(uint localIndex, uint chunkIndex, RWStructuredBuffer<uint3> localPositionBuffer, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable)
{
    return RayStartingIndexToRay(GlobalPosToRayStartingIndex(LocalPosToGlobal(LocalIndexToPos(localIndex, localPositionBuffer), chunkPositionTable, chunkIndex), chunkIndex, chunkEdgeTable));
}
uint LocalRayToGlobalRay(uint localRayIndex, uint chunkIndex, RWStructuredBuffer<uint3> _localPositionBuffer, RWStructuredBuffer<uint3> _chunkPositionTable, RWStructuredBuffer<uint> _chunkEdgeTable, RWStructuredBuffer<TriIndex> _localEdgeBuffer)
{
    return LocalIndexToGlobalRay(LocalRayToBottom(localRayIndex, _localEdgeBuffer), chunkIndex, _localPositionBuffer, _chunkPositionTable, _chunkEdgeTable);
}

//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
//This section contains the methods used to pack the height values into buffer to save on memory

uint GlobalRayToAdjusted(uint globalRayIndex, uint chunkIndex, RWStructuredBuffer<uint3> chunkPositionTable)
{
    return globalRayIndex * e_chunkStepDepth + chunkPositionTable[chunkIndex].y;
}
uint GlobalRayToAdjusted(uint globalRayIndex, uint currentYChunk)
{
    return (globalRayIndex * e_chunkStepDepth) + currentYChunk;
}

uint LocalIndexToAdjustedIndex(uint localIndex, uint chunkIndex, RWStructuredBuffer<uint3> localPositionBuffer, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable)
{
    return GlobalRayToAdjusted(LocalIndexToGlobalRay(localIndex, chunkIndex, localPositionBuffer, chunkPositionTable, chunkEdgeTable), chunkIndex, chunkPositionTable);
}

uint AdjustedToArray(uint adjustedIndex, uint packedSize)
{
    return floor(adjustedIndex / packedSize);
}

uint AdjustedToBit(uint adjustedIndex, uint packedSize, uint sizeInBits)
{
    return (adjustedIndex % packedSize) * sizeInBits;
}

//returns the value of any global buffer
uint GetGlobalValue(uint adjustedIndex, uint packedSize, uint sizeInBits, uint comparison, RWStructuredBuffer<uint> globalBuffer)
{
    return (globalBuffer[AdjustedToArray(adjustedIndex, packedSize)] >> AdjustedToBit(adjustedIndex, packedSize, sizeInBits)) & comparison;
}

//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
// Contains the calcaluations for local minumum and solidty as well as the transfer into the global buffer

void LocalVisCalcs(uint localIndex, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<uint3> localPositionBuffer, RWStructuredBuffer<uint> heightTransferBuffer, RWStructuredBuffer<uint> solidTransferBuffer, RWStructuredBuffer<TriIndex> edgeTable)
{
	if ((meshProperties[localIndex].lowIndex & 0xFFF) != 0)
	{
        InterlockedMin(heightTransferBuffer[LocalIndexToLocalRay(localIndex, edgeTable)], localPositionBuffer[localIndex].y);
		InterlockedOr(solidTransferBuffer[LocalIndexToLocalRay(localIndex, edgeTable)], 1U);
	}
}

//Clears the bits of any global buffer based on a given arrayIndex and bit index.
uint ClearBits(uint tempGlobal, uint bitIndex, uint comparison)
{
    uint clear = ~(comparison << bitIndex);
	
    return tempGlobal & clear;
}

//Create a temporary sequence that could possibly be stored into the global buffer
uint TempSetHeight(uint bitIndex, uint tempGlobal, uint transferHeight)
{
    return ClearBits(tempGlobal, bitIndex, s_heightComparison) | (transferHeight << bitIndex);
}

void SetGlobalHeight(uint adjustedIndex, uint arrayIndex, uint bitIndex, uint localRayIndex, RWStructuredBuffer<uint> _heightTransferBuffer, RWStructuredBuffer<uint> _globalHeightTable)
{
    if (GetGlobalValue(adjustedIndex, e_heightPackedSize, e_heightSizeInBits, s_heightComparison, _globalHeightTable) > _heightTransferBuffer[localRayIndex])
    {
        while (true)
        {
            uint temp = _globalHeightTable[arrayIndex];
            uint prev;
            InterlockedCompareExchange(_globalHeightTable[arrayIndex], temp, TempSetHeight(bitIndex, temp, _heightTransferBuffer[localRayIndex]), prev);
			
            if (prev == temp)
            {
                return;
            }
			
        }
    }
}

 void LocalToGlobalTransfer(uint adjustedIndex, uint localRayIndex, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<uint> heightTransferBuffer, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<uint> solidTransferBuffer)
{	
    SetGlobalHeight(adjustedIndex, AdjustedToArray(adjustedIndex, e_heightPackedSize), AdjustedToBit(adjustedIndex, e_heightPackedSize, e_heightSizeInBits), localRayIndex, heightTransferBuffer, globalHeightTable);
	
    InterlockedOr(globalSolidBuffer[AdjustedToArray(adjustedIndex, e_solidPackedSize)], solidTransferBuffer[localRayIndex] << AdjustedToBit(adjustedIndex, e_solidPackedSize, e_solidSizeInBits));
}

void TransferToGlobalBuffer(uint localRayIndex, uint chunkIndex, RWStructuredBuffer<uint3> localPositionBuffer, RWStructuredBuffer<uint> heightTransferBuffer, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<uint> solidTransferBuffer)
{
    LocalToGlobalTransfer(LocalIndexToAdjustedIndex(LocalRayToBottom(localRayIndex, edgeTable), chunkIndex, localPositionBuffer, chunkPositionTable, chunkEdgeTable), localRayIndex, globalHeightTable, heightTransferBuffer, globalSolidBuffer, solidTransferBuffer);
}

//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
// Global Visibility Calcs

//returns the greatest chunk less than or equal to the current chunkIndex position
uint GreatestStep(uint _globalRayIndex, uint _currentYChunk, RWStructuredBuffer<uint> _globalSolidBuffer)
{
    
    for (int i = _currentYChunk; i > e_activeDepth; i--)
	{
        if (GetGlobalValue(GlobalRayToAdjusted(_globalRayIndex, i), e_solidPackedSize, e_solidSizeInBits, s_solidComparison, _globalSolidBuffer) == 1)
        {
			return i;
		}
	}

	//will only reach this point if the there are no solids at or below the chunk y level
    return e_chunkStepDepth + 1;
}


//Return which chunk in the ray progression is visible, only one y level can be visible at a time
void GlobalVisCalc(uint globalRayIndex, uint adjustedIndex, uint crossYChunk, uint trueCrossHeight, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<uint> globalSolidBuffer, RWStructuredBuffer<KeyValue> _hashTransferBuffer)
{
	//make sure we dont repeat calculations
    if (HashLookup(_hashTransferBuffer, globalRayIndex) == s_empty)
    {
        if (trueCrossHeight < (GetGlobalValue(adjustedIndex, e_heightPackedSize, e_heightSizeInBits, s_heightComparison, globalHeightTable) + (crossYChunk * e_height)))
        {
            HashInsert(_hashTransferBuffer, globalRayIndex, GreatestStep(globalRayIndex, crossYChunk - 1, globalSolidBuffer));
        }
        else
        {
            HashInsert(_hashTransferBuffer, globalRayIndex, GreatestStep(globalRayIndex, crossYChunk, globalSolidBuffer));
        }
    }
}

//******************************************************************************************************************************
//******************************************************************************************************************************
//******************************************************************************************************************************
// Local Visibility Calcs

//returns whether a local index is solid or not
bool IsSolid(uint _index, RWStructuredBuffer<DualIndex> _meshProperties)
{
    return (_meshProperties[_index].lowIndex & 0xFFF) != 0;
}

//this method does three things: 
//increments counter up by one, to be read by the render buffer
//sets the visibility flag to true on the mesh buffer
//sets the shadow flag on the global ray
void SetVis(uint _index, uint _globalRayIndex, uint _visInfo, RWStructuredBuffer<KeyValue> _hashTransferBuffer, RWStructuredBuffer<DualIndex> _meshProperties, RWStructuredBuffer<int> _counter)
{
    InterlockedAdd(_counter[0], 1);
    _meshProperties[_index].lowIndex |= 1U << 12;
    HashInsert(_hashTransferBuffer, _globalRayIndex, (_visInfo | (1 << 4)));
}


void FinalVisCalc(uint cascIndex, uint _globalRayIndex, uint _visInfo, uint localCrossHeight, uint _currentYChunk, uint _crossYChunk, RWStructuredBuffer<KeyValue> hashTransferBuffer, RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<int> counter, RWStructuredBuffer<uint3> localPositionBuffer)
{
	//why? because the compiler is retarded thats why
    if (_currentYChunk == _crossYChunk)
    {
        if (IsSolid(cascIndex, meshProperties) && localPositionBuffer[cascIndex].y <= localCrossHeight)
        {
            SetVis(cascIndex, _globalRayIndex, _visInfo, hashTransferBuffer, meshProperties, counter);
            return;
        }
        while (IsNotTrailingFace(edgeTable, cascIndex))
        {
            cascIndex -= e_stepIndex;
            if (IsSolid(cascIndex, meshProperties) && localPositionBuffer[cascIndex].y <= localCrossHeight)
            {
                SetVis(cascIndex, _globalRayIndex, _visInfo, hashTransferBuffer, meshProperties, counter);
                return;
            }
        }
    }
	else
    {
        if (IsSolid(cascIndex, meshProperties))
        {
            SetVis(cascIndex, _globalRayIndex, _visInfo, hashTransferBuffer, meshProperties, counter);
            return;
        }
        while (IsNotTrailingFace(edgeTable, cascIndex))
        {
            cascIndex -= e_stepIndex;
            if (IsSolid(cascIndex, meshProperties))
            {
                SetVis(cascIndex, _globalRayIndex, _visInfo, hashTransferBuffer, meshProperties, counter);
                return;
            }
        }
    }
}

//************************************************************************************************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************************************************************************************************

[numthreads(1, 1, 1)]
void ClearCounter(uint3 id : SV_DispatchThreadID)
{
	_Counter[id.x] = 0;
}

[numthreads(1024, 1, 1)]
void ClearMeshProperties(uint3 id : SV_DispatchThreadID)
{
    _MeshProperties[id.x].lowIndex &= 0xFFF;
}

[numthreads(1024, 1, 1)]
void InitializeGlobalHeightBuffer(uint3 id: SV_DispatchThreadID)
{
    _GlobalHeightTable[id.x] = 0xFFFFFFFF;
}

[numthreads(1024, 1, 1)]
void InitializeGlobalSolidBuffer(uint3 id: SV_DispatchThreadID)
{
	GlobalSolidBuffer[id.x] = 0;
}

[numthreads(768, 1, 1)]
void InitializeLocalTransferBuffers(uint3 id: SV_DispatchThreadID)
{
    if (id.x < e_leadingEdgeCount)
    {
        HeightTransferBuffer[id.x] = 15U;
        SolidTransferBuffer[id.x] = 0;
    }
}

[numthreads(1024, 1, 1)]
void InitializeHashTransferBuffer(uint3 id: SV_DispatchThreadID)
{
	if (id.x < e_hashBufferSize)
	{
		HashTransferBuffer[id.x].key = 0xffffffff;
		HashTransferBuffer[id.x].value = 0xffffffff;
	}
}

[numthreads(1024, 1, 1)]
void InitializeLocalReference(uint3 id : SV_DispatchThreadID)
{
	//Ensure the table is wiped
    _LocalEdgeBuffer[id.x].lowIndex = 0;
    _LocalEdgeBuffer[id.x].highIndex = 0;
    _LocalEdgeBuffer[id.x].thirdIndex = 0;

	//fill the reference table
    _LocalPositionBuffer[id.x] = IndexToPosition(id.x, e_height, e_width);
	//call the edgeCheck method
    _LocalEdgeBuffer[id.x].lowIndex = LocalEdgeChecks(id.x, _LocalPositionBuffer);
}

[numthreads(1024, 1, 1)]
void InitializeChunkReference(uint3 id : SV_DispatchThreadID)
{
	_ChunkEdgeTable[id.x] = 0;

	_ChunkPositionTable[id.x] = IndexToPosition(id.x, e_yChunks, e_zChunks);
	_ChunkEdgeTable[id.x] = ChunkEdgeChecks(id.x, _ChunkPositionTable);
}

[numthreads(1, 1, 1)]
void SingleThread(uint3 id : SV_DispatchThreadID)
{
	uint trailingCount = 0;
    uint topCount = 0;
	
	for (uint i = 0; i < e_localChunkSize; i++)
	{
        if (_LocalPositionBuffer[i].x == 0 || _LocalPositionBuffer[i].y == 0 || _LocalPositionBuffer[i].z == 0)
		{
			_TempTable[i].lowIndex = trailingCount;
			trailingCount++;
		}
		
        if (_LocalPositionBuffer[i].y == e_height - 1)
        {
            _TempTable[i].highIndex = topCount;
            topCount++;
        }

    }
}

[numthreads(1024, 1, 1)]
void InitializeRayReference(uint3 id : SV_DispatchThreadID)
{
    rayCalc(_LocalEdgeBuffer, _TempTable, _LocalPositionBuffer, id.x);
}

[numthreads(1024, 1, 1)]
void Noise(uint3 id : SV_DispatchThreadID)
{
	//Ensure the Mesh table is wiped
	_MeshProperties[id.x].lowIndex = 0;
	_MeshProperties[id.x].highIndex = 0;

    if (noise((_LocalPositionBuffer[id.x] + uint3(e_xOffset, e_yOffset, e_zOffset)) * 0.1) >= .45)
	{
		//this will need to be revisted later for more complex world gen
		_MeshProperties[id.x].lowIndex = 1;
	}
	else
	{
		_MeshProperties[id.x].lowIndex = 0;
	}
}

//method to check other algorithm
[numthreads(1024, 1, 1)]
void CheckFaces(uint3 id : SV_DispatchThreadID)
{
	if (_MeshProperties[id.x].lowIndex != 0 && (_MeshProperties[id.x + 1].lowIndex == 0 || _MeshProperties[id.x - 1].lowIndex == 0
		|| _MeshProperties[id.x + e_width].lowIndex == 0 || _MeshProperties[id.x - e_width].lowIndex == 0
		|| _MeshProperties[id.x + e_width * e_height].lowIndex == 0 || _MeshProperties[id.x - e_width * e_height].lowIndex == 0
		|| _LocalPositionBuffer[id.x].y == 0 || _LocalPositionBuffer[id.x].y == e_height - 1 || _LocalPositionBuffer[id.x].z == 0 || _LocalPositionBuffer[id.x].z == e_width - 1))
	{
		InterlockedAdd(_Counter[0], 1);
		_MeshProperties[id.x].lowIndex |= 1U << 12;
	}
	else
	{
		_MeshProperties[id.x].lowIndex &= ~(1U << 12);
	}
}

[numthreads(1024, 1, 1)]
void PopulateRender(uint3 id : SV_DispatchThreadID)
{
	if (topEdge)
	{
		if (((_MeshProperties[id.x].highIndex >> 14) & 1U) == 1)
		{
			_RenderProperties.Append(id.x + ((_MeshProperties[id.x].lowIndex & 0xFFF) << 16));
		}
	}
	else
	{
		if (((_MeshProperties[id.x].lowIndex >> 12) & 1U) == 1)
		{
			_RenderProperties.Append(id.x + ((_MeshProperties[id.x].lowIndex & 0xFFF) << 16));
		}
	}
}

[numthreads(1024, 1, 1)]
void LocalVisibilityCalcs(uint3 id: SV_DispatchThreadID)
{
	LocalVisCalcs(id.x, _MeshProperties, _LocalPositionBuffer, HeightTransferBuffer, SolidTransferBuffer, _LocalEdgeBuffer);
}

[numthreads(768, 1, 1)]
void TransferToGlobal(uint3 id: SV_DispatchThreadID)
{
    if(id.x < e_leadingEdgeCount)
    {
        TransferToGlobalBuffer(id.x, chunkIndex, _LocalPositionBuffer, HeightTransferBuffer, _GlobalHeightTable, _LocalEdgeBuffer, _ChunkPositionTable, _ChunkEdgeTable, GlobalSolidBuffer, SolidTransferBuffer);
    }
}

//calculates full visibility profile, top and sides, of a cube
[numthreads(768, 1, 1)]
void FullVisCalcs(uint3 id : SV_DispatchThreadID)
{
	if(id.x < e_leadingEdgeCount)
	{
        uint globalRayIndex = LocalRayToGlobalRay(id.x, chunkIndex, _LocalPositionBuffer, _ChunkPositionTable, _ChunkEdgeTable, _LocalEdgeBuffer);
        GlobalVisCalc(globalRayIndex, GlobalRayToAdjusted(globalRayIndex, e_crossYChunk), e_crossYChunk, e_trueCrossHeight, _GlobalHeightTable, GlobalSolidBuffer, HashTransferBuffer);
    }
}

[numthreads(768, 1, 1)]
void FullCull(uint3 id : SV_DispatchThreadID)
{
	if(id.x < e_leadingEdgeCount)
	{
        uint globalRayIndex = LocalRayToGlobalRay(id.x, chunkIndex, _LocalPositionBuffer, _ChunkPositionTable, _ChunkEdgeTable, _LocalEdgeBuffer);
		
        uint visInfo = HashLookup(HashTransferBuffer, globalRayIndex);
        if (((visInfo >> 4) & 1) == 0 && (visInfo & 15U) == currentYChunk)
        {
            FinalVisCalc(LocalRayToTop(id.x, _LocalEdgeBuffer), globalRayIndex, visInfo, e_localCrossHeight, currentYChunk, e_crossYChunk,
			HashTransferBuffer, _LocalEdgeBuffer, _MeshProperties, _Counter, _LocalPositionBuffer);
        }
    }
}

