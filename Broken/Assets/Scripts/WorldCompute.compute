#pragma kernel ZeroCounter
#pragma kernel InitializeDummyChunk
#pragma kernel InitializeCubes
#pragma kernel Noise
#pragma kernel CheckFaces
#pragma kernel PopulateRender 
#pragma kernel StupidCull
#pragma kernel StupidCull2
#pragma kernel CoolCull

struct MeshIndex
{
	uint lowIndex;
	uint highIndex;
};

RWStructuredBuffer<uint> _ChunkEdgeTable;
RWStructuredBuffer<MeshIndex> _DummyChunk;
RWStructuredBuffer<uint> _EdgeTable;
RWStructuredBuffer<uint3> _ChunkTable;
RWStructuredBuffer<MeshIndex> _MeshProperties;
RWStructuredBuffer<int> _Counter;
AppendStructuredBuffer<uint> _RenderProperties;

//These are just references for the cull method
StructuredBuffer<MeshIndex> _DiagonalTopChunk;
StructuredBuffer<MeshIndex> _TopLeftChunk;
StructuredBuffer<MeshIndex> _DiagonalMiddleChunk;
StructuredBuffer<MeshIndex> _MiddleLeftChunk;
StructuredBuffer<MeshIndex> _TopRightChunk;
StructuredBuffer<MeshIndex> _MiddleTopChunk;
StructuredBuffer<MeshIndex> _MiddleRightChunk;

uint cubeCount;
uint length;
uint height;
uint width;
uint xOffset;
uint yOffset;
uint zOffset;
uint stepIndex;

uint crossHeight;

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// Added 5/2/2021
float3 mod289(float3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x) {
	return mod289(((x * 34.0) + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
	return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
	const float2  C = float2(1.0 / 6.0, 1.0 / 3.0);
	const float4  D = float4(0.0, 0.5, 1.0, 2.0);

	// First corner
	float3 i = floor(v + dot(v, C.yyy));
	float3 x0 = v - i + dot(i, C.xxx);

	// Other corners
	float3 g = step(x0.yzx, x0.xyz);
	float3 l = 1.0 - g;
	float3 i1 = min(g.xyz, l.zxy);
	float3 i2 = max(g.xyz, l.zxy);

	//   x0 = x0 - 0.0 + 0.0 * C.xxx;
	//   x1 = x0 - i1  + 1.0 * C.xxx;
	//   x2 = x0 - i2  + 2.0 * C.xxx;
	//   x3 = x0 - 1.0 + 3.0 * C.xxx;
	float3 x1 = x0 - i1 + C.xxx;
	float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

  // Permutations
	i = mod289(i);
	float4 p = permute(permute(permute(
		i.z + float4(0.0, i1.z, i2.z, 1.0))
		+ i.y + float4(0.0, i1.y, i2.y, 1.0))
		+ i.x + float4(0.0, i1.x, i2.x, 1.0));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	float n_ = 0.142857142857; // 1.0/7.0
	float3  ns = n_ * D.wyz - D.xzx;

	float4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	float4 x_ = floor(j * ns.z);
	float4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

	float4 x = x_ * ns.x + ns.yyyy;
	float4 y = y_ * ns.x + ns.yyyy;
	float4 h = 1.0 - abs(x) - abs(y);

	float4 b0 = float4(x.xy, y.xy);
	float4 b1 = float4(x.zw, y.zw);

	//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	float4 s0 = floor(b0) * 2.0 + 1.0;
	float4 s1 = floor(b1) * 2.0 + 1.0;
	float4 sh = -step(h, float4(0, 0, 0, 0));

	float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

	float3 p0 = float3(a0.xy, h.x);
	float3 p1 = float3(a0.zw, h.y);
	float3 p2 = float3(a1.xy, h.z);
	float3 p3 = float3(a1.zw, h.w);

	//Normalise gradients
	float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
	m = m * m;
	return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1),
		dot(p2, x2), dot(p3, x3)));
}

float hash(float n)
{
	return frac(sin(n)*43758.5453);
}

float noise(float3 x)
{
	// The noise function returns a value in the range -1.0f -> 1.0f

	float3 p = floor(x);
	float3 f = frac(x);

	f = f * f*(3.0 - 2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
		lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
		lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
			lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
}

uint edgeChecks(bool isTop, bool isLeft, bool isRight, uint threadID, uint3 worldPos)
{
	uint edgeCase = 0;

	if (isLeft)
	{
		if (isTop)
		{
			if (isRight)
			{
				//this is the single index for the leading corner of the chunk
				edgeCase = 0;

				//store the adjacent index for this case
				edgeCase |= (threadID - (cubeCount - 1)) << 5;

				edgeCase |= (1U << 4);
			}
			else
			{
				//Top Left
				edgeCase = 1;

				edgeCase |= (threadID - (cubeCount - (width + 1))) << 5;

				edgeCase |= (1U << 4);
			}
		}
		else
		{
			if (isRight)
			{
				//Diagonal Middle
				edgeCase = 2;

				edgeCase |= (threadID - (cubeCount - ((width * height) + 1))) << 5;

				edgeCase |= (1U << 4);
			}
			else
			{
				//Middle Left
				edgeCase = 3;

				edgeCase |= (threadID - (cubeCount - ((width * height) + width))) << 5;

				edgeCase |= (1U << 4);
			}
		}
	}
	else
	{
		if (isTop)
		{
			if (isRight)
			{
				//Top Right
				edgeCase = 4;

				edgeCase |= (threadID + 1) << 5;

				edgeCase |= (1U << 4);
			}
			else
			{
				//Top Middle
				edgeCase = 5;

				edgeCase |= (threadID + width + 1) << 5;
			}
		}
		else
		{
			if (isRight)
			{
				//Middle Right
				edgeCase = 6;

				edgeCase |= (threadID + (width * height) + 1) << 5;

				edgeCase |= (1U << 4);
			}
			else
			{
				edgeCase = 7;
			}
		}
	}

	if (worldPos.x == 0 || worldPos.y == 0 || worldPos.z == 0)
	{
		//trailing face
		edgeCase |= 1U << 3;
	}

	return edgeCase;
}

void calculateVisibility(RWStructuredBuffer<int> counter, RWStructuredBuffer<MeshIndex> meshProperties, RWStructuredBuffer<uint> edgeTable, uint index, bool visibilityCheck,
	bool skip, uint crossHeight)
{
	if (visibilityCheck)
	{
		if (meshProperties[index].lowIndex != 0)
		{
			InterlockedAdd(counter[0], 1);
			meshProperties[index].lowIndex |= 1U << 12 + crossHeight;
			meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
			while (((edgeTable[index] >> 3) & 1U) == 0U)
			{
				index -= stepIndex;
				meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
			}
		}
		while (((edgeTable[index] >> 3) & 1U) == 0U)
		{
			index -= stepIndex;
			if (meshProperties[index].lowIndex != 0)
			{
				InterlockedAdd(counter[0], 1);
				meshProperties[index].lowIndex |= 1U << 12 + crossHeight;
				meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
				while (((edgeTable[index] >> 3) & 1U) == 0U)
				{
					index -= stepIndex;
					meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
				}
			}
		}
	}
	else
	{
		if (skip)
		{
			meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
			while (((edgeTable[index] >> 3) & 1U) == 0U)
			{
				index -= stepIndex;
				meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
			}
		}
	}
}

void calculateVisibilityHighIndex(RWStructuredBuffer<int> counter, RWStructuredBuffer<MeshIndex> meshProperties, RWStructuredBuffer<uint> edgeTable, uint index, bool visibilityCheck,
	bool skip, uint crossHeight)
{
	if (visibilityCheck)
	{
		if (meshProperties[index].lowIndex != 0)
		{
			InterlockedAdd(counter[0], 1);
			meshProperties[index].highIndex |= 1U << crossHeight;
			meshProperties[index].highIndex |= 1U << 1 + crossHeight;
			while (((edgeTable[index] >> 3) & 1U) == 0U)
			{
				index -= stepIndex;
				meshProperties[index].highIndex |= 1U << 1 + crossHeight;
			}
		}
		while (((edgeTable[index] >> 3) & 1U) == 0U)
		{
			index -= stepIndex;
			if (meshProperties[index].lowIndex != 0)
			{
				InterlockedAdd(counter[0], 1);
				meshProperties[index].highIndex |= 1U << crossHeight;
				meshProperties[index].highIndex |= 1U << 1 + crossHeight;
				while (((edgeTable[index] >> 3) & 1U) == 0U)
				{
					index -= stepIndex;
					meshProperties[index].highIndex |= 1U << 1 + crossHeight;
				}
			}
		}
	}
	else
	{
		if (skip)
		{
			meshProperties[index].highIndex |= 1U << 1 + crossHeight;
			while (((edgeTable[index] >> 3) & 1U) == 0U)
			{
				index -= stepIndex;
				meshProperties[index].highIndex |= 1U << 1 + crossHeight;
			}
		}
	}
}


[numthreads(1, 1, 1)]
void ZeroCounter(uint3 id : SV_DispatchThreadID)
{
	_Counter[id.x] = 0;
}

[numthreads(1024, 1, 1)]
void InitializeDummyChunk(uint3 id : SV_DispatchThreadID)
{
	_DummyChunk[id.x].lowIndex = 0;
	_DummyChunk[id.x].highIndex = 0;
}

[numthreads(1024, 1, 1)]
void InitializeCubes(uint3 id : SV_DispatchThreadID)
{
	//Ensure the table is wiped
	_EdgeTable[id.x] = 0;
	//fill the reference table
	_ChunkTable[id.x] = uint3(round(floor(id.x / (height * width))), round(floor(id.x / width) % height), round(id.x % width));
	//call the edgeCheck method
	_EdgeTable[id.x] = edgeChecks((_ChunkTable[id.x].y == (height - 1)), (_ChunkTable[id.x].x == (length - 1)), (_ChunkTable[id.x].z == (width - 1)), id.x, _ChunkTable[id.x]);
}

[numthreads(1024, 1, 1)]
void Noise(uint3 id : SV_DispatchThreadID)
{
	//Ensure the Mesh table is wiped
	_MeshProperties[id.x].lowIndex = 0;
	_MeshProperties[id.x].highIndex = 0;

	if(noise((_ChunkTable[id.x] + uint3(xOffset, yOffset, zOffset)) * 0.1) >= .45)
	{
		//this will need to be revisted later for more complex world gen
		_MeshProperties[id.x].lowIndex = 1;
	}
	else
	{
		_MeshProperties[id.x].lowIndex = 0;
	}
}

//method to check other algorithm
[numthreads(1024, 1, 1)]
void CheckFaces(uint3 id : SV_DispatchThreadID)
{
	if (_MeshProperties[id.x].lowIndex != 0 && (_MeshProperties[id.x + 1].lowIndex == 0 || _MeshProperties[id.x - 1].lowIndex == 0
		|| _MeshProperties[id.x + width].lowIndex == 0 || _MeshProperties[id.x - width].lowIndex == 0
		|| _MeshProperties[id.x + width * height].lowIndex == 0 || _MeshProperties[id.x - width * height].lowIndex == 0
		|| _ChunkTable[id.x].y == 0 || _ChunkTable[id.x].y == height - 1 || _ChunkTable[id.x].z == 0 || _ChunkTable[id.x].z == width - 1))
	{
		InterlockedAdd(_Counter[0], 1);
		_MeshProperties[id.x].lowIndex |= 1U << 12;
	}
	else
	{
		_MeshProperties[id.x].lowIndex &= ~(1U << 12);
	}
}

[numthreads(1024, 1, 1)]
void PopulateRender(uint3 id : SV_DispatchThreadID)
{
	if (crossHeight > 9)
	{
		if (((_MeshProperties[id.x].highIndex >> (crossHeight - 1) * 2) & 1U) == 1)
		{
			_RenderProperties.Append(id.x + ((_MeshProperties[id.x].lowIndex & 0xFFF) << 16));
		}
	}
	else
	{
		if (((_MeshProperties[id.x].lowIndex >> 12 + (crossHeight - 1) * 2) & 1U) == 1)
		{
			_RenderProperties.Append(id.x + ((_MeshProperties[id.x].lowIndex & 0xFFF) << 16));
		}
	}
}

[numthreads(1024, 1, 1)]
void StupidCull(uint3 id: SV_DispatchThreadID)
{
	_MeshProperties[id.x].lowIndex &= ~(0x7FFFF << 12);
	bool visibilityCheck = 0;
	bool skip = 1;
	uint tempHeight = (crossHeight - 1) * 2;

	switch (_EdgeTable[id.x] & 0x7)
	{
	case 0:
		visibilityCheck = ((_DiagonalTopChunk[_EdgeTable[id.x] >> 5].lowIndex >> 13 + tempHeight) ^ 1U);
		break;
	case 1:
		visibilityCheck = ((_TopLeftChunk[_EdgeTable[id.x] >> 5].lowIndex >> 13 + tempHeight) ^ 1U);
		break;
	case 2:
		visibilityCheck = ((_DiagonalMiddleChunk[_EdgeTable[id.x] >> 5].lowIndex >> 13 + tempHeight) ^ 1U);
		break;
	case 3:
		visibilityCheck = ((_MiddleLeftChunk[_EdgeTable[id.x] >> 5].lowIndex >> 13 + tempHeight) ^ 1U);
		break;
	default:
		skip = 0;
		break;
	}

	calculateVisibility(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, tempHeight);
}

//this is retarded but necessary because of buffer limit
[numthreads(1024, 1, 1)]
void StupidCull2(uint3 id: SV_DispatchThreadID)
{
	bool visibilityCheck = 0;
	bool skip = 1;
	uint tempHeight = (crossHeight - 1) * 2;

	switch (_EdgeTable[id.x] & 0x7)
	{
	case 4:
		visibilityCheck = ((_TopRightChunk[(_EdgeTable[id.x] >> 5)].lowIndex >> 13 + tempHeight) ^ 1U);
		break;
	case 5:
		visibilityCheck = ((_MiddleTopChunk[(_EdgeTable[id.x] >> 5)].lowIndex >> 13 + tempHeight) ^ 1U);
		break;
	case 6:
		visibilityCheck = ((_MiddleRightChunk[(_EdgeTable[id.x] >> 5)].lowIndex >> 13 + tempHeight) ^ 1U);
		break;
	default:
		skip = 0;
		break;
	}

	calculateVisibility(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, tempHeight);
	/*
	uint index = id.x;
	if (visibilityCheck)
	{
		//this is retarded but idk how to fix
		if (_MeshProperties[index].lowIndex != 0)
		{
			InterlockedAdd(_Counter[0], 1);
			_MeshProperties[index].lowIndex |= 1U << 12;
			_MeshProperties[index].lowIndex |= 1U << 13;
			while (((_EdgeTable[index] >> 3) & 1U) == 0U)
			{
				index -= stepIndex;
				_MeshProperties[index].lowIndex |= 1U << 13;
			}
		}
		while (((_EdgeTable[index] >> 3) & 1U) == 0U)
		{
			index -= stepIndex;
			if (_MeshProperties[index].lowIndex != 0)
			{
				InterlockedAdd(_Counter[0], 1);
				_MeshProperties[index].lowIndex |= 1U << 12;
				_MeshProperties[index].lowIndex |= 1U << 13;
				while (((_EdgeTable[index] >> 3) & 1U) == 0U)
				{
					index -= stepIndex;
					_MeshProperties[index].lowIndex |= 1U << 13;
				}
			}
		}
	}
	else
	{
		if (skip)
		{
			_MeshProperties[index].lowIndex |= 1U << 13;
			while (((_EdgeTable[index] >> 3) & 1U) == 0U)
			{
				index -= stepIndex;
				_MeshProperties[index].lowIndex |= 1U << 13;
			}
		}
	}
	*/
}

[numthreads(1024, 1, 1)]
void CoolCull(uint3 id : SV_DispatchThreadID)
{
	_MeshProperties[id.x].lowIndex &= ~(0x7FFFF << 12);
	_MeshProperties[id.x].highIndex = 0;

	//adjust from the cross section height to the height in the array
	uint adjustedHeight = crossHeight - 1;
	if (_ChunkTable[id.x].y <= adjustedHeight)
	{
		if (_ChunkTable[id.x].y == adjustedHeight || ((_EdgeTable[id.x] >> 4)  & 1U) == 1)
		{
			bool visibilityCheck = 0;
			bool skip = 1;
			
			if (crossHeight > 9)
			{
				uint tempHeight = adjustedHeight * 2;

				switch (_EdgeTable[id.x] & 0x7)
				{
				case 0:
					visibilityCheck = true;
					break;
				case 1:
					visibilityCheck = true;
					break;
				case 2:
					visibilityCheck = ((_DiagonalMiddleChunk[_EdgeTable[id.x] >> 5].highIndex >> 1 + tempHeight) ^ 1U);
					break;
				case 3:
					visibilityCheck = ((_MiddleLeftChunk[_EdgeTable[id.x] >> 5].highIndex >> 1 + tempHeight) ^ 1U);
					break;
				case 4:
					visibilityCheck = true;
					break;
				case 5:
					visibilityCheck = true;
					break;
				case 6:
					visibilityCheck = ((_MiddleRightChunk[(_EdgeTable[id.x] >> 5)].highIndex >> 1 + tempHeight) ^ 1U);
					break;
				case 7:
					visibilityCheck = true;
					break;
				default:
					skip = 0;
					break;
				}

				calculateVisibilityHighIndex(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, tempHeight);
			}
			else
			{
				if (crossHeight == 9)
				{
					uint tempHeight = adjustedHeight * 2;
					switch (_EdgeTable[id.x] & 0x7)
					{
					case 0:
						visibilityCheck = true;
						break;
					case 1:
						visibilityCheck = true;
						break;
					case 2:
						visibilityCheck = ((_DiagonalMiddleChunk[_EdgeTable[id.x] >> 5].highIndex >> 1 + tempHeight) ^ 1U);
						break;
					case 3:
						visibilityCheck = ((_MiddleLeftChunk[_EdgeTable[id.x] >> 5].highIndex >> 1 + tempHeight) ^ 1U);
						break;
					case 4:
						visibilityCheck = true;
						break;
					case 5:
						visibilityCheck = true;
						break;
					case 6:
						visibilityCheck = ((_MiddleRightChunk[(_EdgeTable[id.x] >> 5)].highIndex >> 1 + tempHeight) ^ 1U);
						break;
					case 7:
						visibilityCheck = true;
						break;
					default:
						skip = 0;
						break;
					}

					calculateVisibility(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, tempHeight);
				}
				else
				{
					uint tempHeight = adjustedHeight * 2;
					switch (_EdgeTable[id.x] & 0x7)
					{
					case 0:
						visibilityCheck = true;
						break;
					case 1:
						visibilityCheck = true;
						break;
					case 2:
						visibilityCheck = ((_DiagonalMiddleChunk[_EdgeTable[id.x] >> 5].lowIndex >> 13 + tempHeight) ^ 1U);
						break;
					case 3:
						visibilityCheck = ((_MiddleLeftChunk[_EdgeTable[id.x] >> 5].lowIndex >> 13 + tempHeight) ^ 1U);
						break;
					case 4:
						visibilityCheck = true;
						break;
					case 5:
						visibilityCheck = true;
						break;
					case 6:
						visibilityCheck = ((_MiddleRightChunk[(_EdgeTable[id.x] >> 5)].lowIndex >> 13 + tempHeight) ^ 1U);
						break;
					case 7:
						visibilityCheck = true;
						break;
					default:
						skip = 0;
						break;
					}

					calculateVisibility(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, tempHeight);
				}
			}
		}
	}
}


	

	
