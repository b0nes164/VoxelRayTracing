#pragma kernel ZeroCounter
#pragma kernel InitializeDummyChunks
#pragma kernel InitializeCubes
#pragma kernel InitializeChunks
#pragma kernel SingleThread
#pragma kernel InitializeRays
#pragma kernel InitializeRaysTwo
#pragma kernel InitializeChunkVisibilityTable
#pragma kernel InitializeGlobalHeightTable
#pragma kernel Noise
#pragma kernel CheckFaces
#pragma kernel PopulateRender 
#pragma kernel ChunkVisibilityTable
#pragma kernel ChunkVisibilityTableTwo
#pragma kernel ChunkGlobalVis
#pragma kernel ChunkGlobalVisTwo
#pragma kernel StupidCull
#pragma kernel StupidCull2
#pragma kernel CoolCull

struct DualIndex
{
	uint lowIndex;
	uint highIndex;
};

struct TriIndex
{
	uint lowIndex;
	uint highIndex;
	uint thirdIndex;
};

RWStructuredBuffer<uint> _DummyChunkOne;
RWStructuredBuffer<uint> _DummyChunkTwo;
RWStructuredBuffer<DualIndex> _AltDummyChunk;

RWStructuredBuffer<uint> _ChunkEdgeTable;
RWStructuredBuffer<uint3> _ChunkPositionTable;
RWStructuredBuffer<uint> _TempTable;
RWStructuredBuffer<TriIndex> _EdgeTable;
RWStructuredBuffer<uint> _ChunkVisibilityTables;
RWStructuredBuffer<uint3> _ChunkTable;
RWStructuredBuffer<DualIndex> _MeshProperties;
RWStructuredBuffer<int> _Counter;
AppendStructuredBuffer<uint> _RenderProperties;


RWStructuredBuffer<uint> _GlobalHeightTable;
RWStructuredBuffer<uint> _GlobalSolidTable;
RWStructuredBuffer<uint> _GlobalShadowTable;

RWStructuredBuffer<uint> _ChunkVisibility;


//These are just references for the cull method
StructuredBuffer<uint> _DiagonalTopChunk;
StructuredBuffer<uint> _TopLeftChunk;
StructuredBuffer<uint> _DiagonalMiddleChunk;
StructuredBuffer<uint> _MiddleLeftChunk;
StructuredBuffer<uint> _TopRightChunk;
StructuredBuffer<uint> _MiddleTopChunk;
StructuredBuffer<uint> _MiddleRightChunk;

StructuredBuffer<DualIndex> _IntDiagonalMiddleChunk;
StructuredBuffer<DualIndex> _IntMiddleLeftChunk;
StructuredBuffer<DualIndex> _IntMiddleRightChunk;

uint cubeCount;
uint leadingEdgeCount;
uint stepIndex;
uint counter;
uint length;
uint height;
uint width;
uint xChunks;
uint yChunks;
uint zChunks;
uint xOffset;
uint yOffset;
uint zOffset;

uint globalLength;
uint globalHeight;
uint globalWidth;
uint globalStep;
uint chunkStepDepth;

//this will need to be changed for each table
uint packedSize;
uint heightBitSize;

bool topEdge;
uint crossHeight;
uint trueHeight;
uint currentYChunk;
uint chunkIndex;
uint topOffset;
uint sameLevelOffset;

//**************************************************
//Bit index values DO NOT CHANGE
//LocalEdgeTable 0-2 Leading Face identifier, 3-5 Trailing Face identifier, 6 leading sides identifer, 7-18 corresponding index in adjacent chunk, 19-30 corresponding ray index from any local index 
static uint localEdgeTrailingFace = 3;
static uint localEdgeLeadingSides = 6;
static uint localEdgeNextIndex = 7;
static uint localEdgeRayIndex = 19;

//ChunkEdgeTable 0-2 Leading Face identifier, 3-5 Trailing Face identifier
static uint chunkEdgeTrailingFace = 3;

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// Added 5/2/2021
float3 mod289(float3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x) {
	return mod289(((x * 34.0) + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
	return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
	const float2  C = float2(1.0 / 6.0, 1.0 / 3.0);
	const float4  D = float4(0.0, 0.5, 1.0, 2.0);

	// First corner
	float3 i = floor(v + dot(v, C.yyy));
	float3 x0 = v - i + dot(i, C.xxx);

	// Other corners
	float3 g = step(x0.yzx, x0.xyz);
	float3 l = 1.0 - g;
	float3 i1 = min(g.xyz, l.zxy);
	float3 i2 = max(g.xyz, l.zxy);

	//   x0 = x0 - 0.0 + 0.0 * C.xxx;
	//   x1 = x0 - i1  + 1.0 * C.xxx;
	//   x2 = x0 - i2  + 2.0 * C.xxx;
	//   x3 = x0 - 1.0 + 3.0 * C.xxx;
	float3 x1 = x0 - i1 + C.xxx;
	float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

  // Permutations
	i = mod289(i);
	float4 p = permute(permute(permute(
		i.z + float4(0.0, i1.z, i2.z, 1.0))
		+ i.y + float4(0.0, i1.y, i2.y, 1.0))
		+ i.x + float4(0.0, i1.x, i2.x, 1.0));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	float n_ = 0.142857142857; // 1.0/7.0
	float3  ns = n_ * D.wyz - D.xzx;

	float4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	float4 x_ = floor(j * ns.z);
	float4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

	float4 x = x_ * ns.x + ns.yyyy;
	float4 y = y_ * ns.x + ns.yyyy;
	float4 h = 1.0 - abs(x) - abs(y);

	float4 b0 = float4(x.xy, y.xy);
	float4 b1 = float4(x.zw, y.zw);

	//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	float4 s0 = floor(b0) * 2.0 + 1.0;
	float4 s1 = floor(b1) * 2.0 + 1.0;
	float4 sh = -step(h, float4(0, 0, 0, 0));

	float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

	float3 p0 = float3(a0.xy, h.x);
	float3 p1 = float3(a0.zw, h.y);
	float3 p2 = float3(a1.xy, h.z);
	float3 p3 = float3(a1.zw, h.w);

	//Normalise gradients
	float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
	m = m * m;
	return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1),
		dot(p2, x2), dot(p3, x3)));
}

float hash(float n)
{
	return frac(sin(n)*43758.5453);
}

float noise(float3 x)
{
	// The noise function returns a value in the range -1.0f -> 1.0f

	float3 p = floor(x);
	float3 f = frac(x);

	f = f * f*(3.0 - 2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
		lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
		lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
			lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
}

//returns if an index is on its leading edge
bool IsOnLeadingEdge(uint value, uint dimension)
{
	return value == (dimension - 1);
}

//returns if an index is on the trailing edge
bool IsOnTrailingEdge(uint value)
{
	return value == 0;
}

//converts index to the x coordinate in any sytem
uint IndexToXPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return round(floor(index / (dimensionY * dimensionZ)));
}

//converts index to the y coordinate in any sytem
uint IndexToYPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return round(floor(index / dimensionZ) % dimensionY);
}

uint IndexToZPosition(uint index, uint dimensionZ)
{
	return round(index % dimensionZ);
}
//translates any index to a position
uint3 IndexToPosition(uint index, uint dimensionY, uint dimensionZ)
{
	return uint3(IndexToXPosition(index, dimensionY, dimensionZ), IndexToYPosition(index, dimensionY, dimensionZ), IndexToZPosition(index, dimensionZ));
}

//edge check specific to the local level
uint LocalEdgeChecks(uint localIndex, RWStructuredBuffer<uint3> chunkTable)
{
	bool isTop = IsOnLeadingEdge(chunkTable[localIndex].y, height);
	bool isLeft = IsOnLeadingEdge(chunkTable[localIndex].x, length);
	bool isRight = IsOnLeadingEdge(chunkTable[localIndex].z, width);
	uint edgeCase;

	if (isLeft)
	{
		if (isTop)
		{
			if (isRight)
			{
				//this is the single index for the leading corner of the chunk
				edgeCase = 0;

				edgeCase |= (1U << localEdgeLeadingSides);

				//store the adjacent index for this case
				edgeCase |= (localIndex - (cubeCount - 1)) << localEdgeNextIndex;
			}
			else
			{
				//Top Left
				edgeCase = 1;

				edgeCase |= (1U << localEdgeLeadingSides);

				edgeCase |= (localIndex - (cubeCount - (width + 1))) << localEdgeNextIndex;
			}
		}
		else
		{
			if (isRight)
			{
				//Diagonal Middle
				edgeCase = 2;

				edgeCase |= (1U << localEdgeLeadingSides);

				edgeCase |= (localIndex - (cubeCount - ((width * height) + 1))) << localEdgeNextIndex;
			}
			else
			{
				//Middle Left
				edgeCase = 3;

				edgeCase |= (1U << localEdgeLeadingSides);

				edgeCase |= (localIndex - (cubeCount - ((width * height) + width))) << localEdgeNextIndex;
			}
		}
	}
	else
	{
		if (isTop)
		{
			if (isRight)
			{
				//Top Right
				edgeCase = 4;

				edgeCase |= (1U << localEdgeLeadingSides);

				edgeCase |= (localIndex + 1) << localEdgeNextIndex;
			}
			else
			{
				//Top Middle
				edgeCase = 5;

				edgeCase |= (localIndex + width + 1) << localEdgeNextIndex;
			}
		}
		else
		{
			if (isRight)
			{
				//Middle Right
				edgeCase = 6;

				edgeCase |= (1U << localEdgeLeadingSides);

				edgeCase |= (localIndex + (width * height) + 1) << localEdgeNextIndex;
			}
			else
			{
				edgeCase = 7;
			}
		}
	}

	bool isBottom = IsOnTrailingEdge(chunkTable[localIndex].y);
	bool isTrailingRight = IsOnTrailingEdge(chunkTable[localIndex].x);
	bool isTrailingLeft = IsOnTrailingEdge(chunkTable[localIndex].z);

	if (isBottom)
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//bottom cube, the 0th index
				edgeCase |= (0 << localEdgeTrailingFace);
			}
			else
			{
				//bottom left
				edgeCase |= (1 << localEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//bottom right
				edgeCase |= (2 << localEdgeTrailingFace);
			}
			else
			{
				//center bottom
				edgeCase |= (3 << localEdgeTrailingFace);
			}
		}
	}
	else
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//diagonal middle
				edgeCase |= (4 << localEdgeTrailingFace);
			}
			else
			{
				//middle left
				edgeCase |= (5 << localEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//middle right
				edgeCase |= (6 << localEdgeTrailingFace);
			}
			else
			{
				//not on the trailing face
				edgeCase |= (7 << localEdgeTrailingFace);
			}
		}
	}

	return edgeCase;
}

//edge check specific to the chunk level
uint ChunkEdgeChecks(uint localIndex, RWStructuredBuffer<uint3> chunkPositionTable)
{
	bool isTop = IsOnLeadingEdge(chunkPositionTable[localIndex].y, yChunks);
	bool isLeft = IsOnLeadingEdge(chunkPositionTable[localIndex].x, xChunks);
	bool isRight = IsOnLeadingEdge(chunkPositionTable[localIndex].z, zChunks);
	uint edgeCase;

	if (isLeft)
	{
		if (isTop)
		{
			if (isRight)
			{
				//this is the single index for the leading corner of the chunk
				edgeCase = 0;
			}
			else
			{
				//Top Left
				edgeCase = 1;
			}
		}
		else
		{
			if (isRight)
			{
				//Diagonal Middle
				edgeCase = 2;
			}
			else
			{
				//Middle Left
				edgeCase = 3;
			}
		}
	}
	else
	{
		if (isTop)
		{
			if (isRight)
			{
				//Top Right
				edgeCase = 4;
			}
			else
			{
				//Top Middle
				edgeCase = 5;
			}
		}
		else
		{
			if (isRight)
			{
				//Middle Right
				edgeCase = 6;
			}
			else
			{
				edgeCase = 7;
			}
		}
	}

	bool isBottom = IsOnTrailingEdge(chunkPositionTable[localIndex].y);
	bool isTrailingRight = IsOnTrailingEdge(chunkPositionTable[localIndex].x);
	bool isTrailingLeft = IsOnTrailingEdge(chunkPositionTable[localIndex].z);

	if (isBottom)
	{
		if(isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//bottom cube, the 0th index, just for my own reference
				edgeCase |= (0 << chunkEdgeTrailingFace);
			}
			else
			{
				//bottom left
				edgeCase |= (1 << chunkEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//bottom right
				edgeCase |= (2 << chunkEdgeTrailingFace);
			}
			else
			{
				//center bottom
				edgeCase |= (3 << chunkEdgeTrailingFace);
			}
		}
	}
	else
	{
		if (isTrailingLeft)
		{
			if (isTrailingRight)
			{
				//diagonal middle
				edgeCase |= (4 << chunkEdgeTrailingFace);
			}
			else
			{
				//middle left
				edgeCase |= (5 << chunkEdgeTrailingFace);
			}
		}
		else
		{
			if (isTrailingRight)
			{
				//middle right
				edgeCase |= (6 << chunkEdgeTrailingFace);
			}
			else
			{
				//not on the trailing face
				edgeCase |= (7 << chunkEdgeTrailingFace);
			}
		}
	}

	return edgeCase;
}

// returns the trailing face identifier 0-7
uint TrailingFace(RWStructuredBuffer<uint> chunkEdgeTable, uint chunkIndex)
{
	return (chunkEdgeTable[chunkIndex] >> chunkEdgeTrailingFace) & 0x7;
}

uint TrailingFace(RWStructuredBuffer<TriIndex> edgeTable, uint localIndex)
{
	return (edgeTable[localIndex].lowIndex >> localEdgeTrailingFace) & 0x7;
}

//these return wheather the given index is on the trailing face based on a lookup table
bool IsTrailingFace(RWStructuredBuffer<uint> chunkEdgeTable, uint chunkIndex)
{
	return TrailingFace(chunkEdgeTable, chunkIndex) != 7;
}

bool IsTrailingFace(RWStructuredBuffer<TriIndex> edgeTable, uint localIndex)
{
	return TrailingFace(edgeTable, localIndex) != 7;
}

void rayCalc(RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<uint> tempTable, uint index)
{
	if (((edgeTable[index].lowIndex >> localEdgeTrailingFace) & 0x7) != 0)
	{
		uint tempIndex = index;

		edgeTable[tempIndex].lowIndex |= (tempTable[index] << localEdgeRayIndex);
		edgeTable[tempTable[index]].highIndex = tempIndex;
		while ((edgeTable[tempIndex].lowIndex & 0x7) == 7)
		{
			tempIndex += stepIndex;
			edgeTable[tempIndex].lowIndex |= (tempTable[index] << localEdgeRayIndex);
		}

		edgeTable[tempTable[index]].highIndex |= tempIndex << 13;
	}
}

void rayCalcTwo(RWStructuredBuffer<TriIndex>  edgeTable, RWStructuredBuffer<uint> tempTable, uint index)
{
	if (((edgeTable[index].lowIndex >> localEdgeTrailingFace) & 0x7) != 0)
	{
		edgeTable[tempTable[index]].thirdIndex = edgeTable[(edgeTable[edgeTable[tempTable[index]].highIndex >> 13].lowIndex >> localEdgeNextIndex) & 0xFFF].lowIndex >> localEdgeRayIndex;
	}
}

uint visMethod(RWStructuredBuffer<int> counter, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, uint crossHeight)
{
	if ((meshProperties[index].lowIndex & 0xFFF) != 0)
	{
		InterlockedAdd(counter[0], 1);
		meshProperties[index].lowIndex |= 1U << 12 + crossHeight;
		meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
		while (((edgeTable[index].lowIndex >> localEdgeTrailingFace) & 0x7) == 7)
		{
			index -= stepIndex;
			meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
		}
	}
	return index;
}

void skipMethod(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, uint crossHeight)
{
	meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
	while (((edgeTable[index].lowIndex >> localEdgeTrailingFace) & 0x7) == 7)
	{
		index -= stepIndex;
		meshProperties[index].lowIndex |= 1U << 13 + crossHeight;
	}
}

void calculateVisibility(RWStructuredBuffer<int> counter, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, bool visibilityCheck,
	bool skip, uint crossHeight)
{
	if (visibilityCheck)
	{
		index = visMethod(counter, meshProperties, edgeTable, index, crossHeight);
		while (((edgeTable[index].lowIndex >> localEdgeTrailingFace) & 0x7) == 7)
		{
			index -= stepIndex;
			index = visMethod(counter, meshProperties, edgeTable, index, crossHeight);
		}
	}
	else
	{
		if (skip)
		{
			skipMethod(meshProperties, edgeTable, index, crossHeight);
		}
	}
}

uint visMethodHighIndex(RWStructuredBuffer<int> counter, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, uint crossHeight)
{
	if ((meshProperties[index].lowIndex & 0xFFF) != 0)
	{
		InterlockedAdd(counter[0], 1);
		meshProperties[index].highIndex |= 1U << crossHeight;
		meshProperties[index].highIndex |= 1U << 1 + crossHeight;
		while (((edgeTable[index].lowIndex >> localEdgeTrailingFace) & 0x7) == 7)
		{
			index -= stepIndex;
			meshProperties[index].highIndex |= 1U << 1 + crossHeight;
		}
	}
	return index;
}

void skipMethodHighIndex(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, uint crossHeight)
{
	meshProperties[index].highIndex |= 1U << 1 + crossHeight;
	while (((edgeTable[index].lowIndex >> localEdgeTrailingFace) & 0x7) == 7)
	{
		index -= stepIndex;
		meshProperties[index].highIndex |= 1U << 1 + crossHeight;
	}
}
void calculateVisibilityHighIndex(RWStructuredBuffer<int> counter, RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<TriIndex> edgeTable, uint index, bool visibilityCheck,
	bool skip, uint crossHeight)
{
	if (visibilityCheck)
	{
		index = visMethodHighIndex(counter, meshProperties, edgeTable, index, crossHeight);
		while (((edgeTable[index].lowIndex >> localEdgeTrailingFace) & 0x7) == 7)
		{
			index -= stepIndex;
			index = visMethodHighIndex(counter, meshProperties, edgeTable, index, crossHeight);
		}
	}
	else
	{
		if (skip)
		{
			skipMethodHighIndex(meshProperties, edgeTable, index, crossHeight);
		}
	}
}

void calcChunkVis(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint> chunkVisibilityTable, RWStructuredBuffer<TriIndex> edgeTable, uint index)
{
	if ((meshProperties[index].lowIndex & 0xFFF) != 0)
	{
		InterlockedMin(chunkVisibilityTable[edgeTable[index].lowIndex >> localEdgeRayIndex], chunkTable[index].y);
	}
}

void calcChunkVisTwo(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint> chunkVisibilityTable, RWStructuredBuffer<TriIndex> edgeTable, uint index)
{
	if ((meshProperties[index].lowIndex & 0xFFF) != 0)
	{
		InterlockedOr(chunkVisibilityTable[edgeTable[index].lowIndex >> localEdgeRayIndex], 1U << 4);
	}
}

void calcGlobalVis(RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<uint> chunkVisibilityTable, StructuredBuffer<uint> nextChunk, RWStructuredBuffer<uint> chunkEdgeTable, uint index, uint chunkIndex, uint chunkHeight, uint currentYChunk)
{
	uint adjustedBitIndex = 5 + chunkHeight;
	if (chunkHeight <= currentYChunk || (((chunkEdgeTable[chunkIndex] >> 4) & 1U) == 1))
	{
		if ((chunkVisibilityTable[index] >> 4) & 1U == 1)
		{
			InterlockedOr(chunkVisibilityTable[index], 1U << adjustedBitIndex);
		}
	}

	if (((nextChunk[edgeTable[index].thirdIndex] >> adjustedBitIndex) & 1U) == 1)
	{
		InterlockedOr(chunkVisibilityTable[index], 1U << adjustedBitIndex);
	}
	

	/*
	* if (chunkHeight <= currentYChunk)
	{
		if ((chunkVisibilityTable[index] >> 4) & 1U == 1)
		{
			InterlockedOr(chunkVisibilityTable[index], 1U << adjustedBitIndex);
		}
	}
	*/
	

	/*
	Just for my own reference
	else
	{
		chunkVisbilityTable[index] |= (0U << adjustedBitIndex);
		
		 
	}
	*/
	
}

//returns the local index of the corresponding next chunk in a ray
uint LocalIndexToNext(uint localIndex, RWStructuredBuffer<TriIndex> edgeTable)
{
	return (edgeTable[localIndex].lowIndex >> 5) & 0xFFF;
}

//returns the local ray index from a local index
uint LocalIndexToLocalRay(uint localIndex, RWStructuredBuffer<TriIndex> edgeTable)
{
	return edgeTable[localIndex].lowIndex >> localEdgeRayIndex;
}

//returns the ray index of the corresponding next chunk in a ray
uint LocalIndexToNextRay(uint localIndex, RWStructuredBuffer<TriIndex> edgeTable)
{
	return LocalIndexToLocalRay(LocalIndexToNext(localIndex, edgeTable), edgeTable);
}

//returns whether the next chunk at the specified height level is in shadow
bool IsNextChunkInShadow(uint localIndex, uint shadowBitIndex, StructuredBuffer<uint> nextChunk, RWStructuredBuffer<TriIndex> edgeTable)
{
	return ((nextChunk[LocalIndexToNextRay(localIndex, edgeTable)] >> shadowBitIndex) & 1U) == 1;
}

//returns whether the next chunk is solid
bool IsNextChunkSolid(uint localIndex, StructuredBuffer<uint> nextChunk, RWStructuredBuffer<TriIndex> edgeTable)
{
	return ((nextChunk[LocalIndexToNextRay(localIndex, edgeTable)] >> 4) & 1U) == 1;
}
bool CalcLocalVis(RWStructuredBuffer<TriIndex> edgeTable, StructuredBuffer<uint> nextChunk, bool _visibilityCheck, uint index, uint _bitIndex, uint _yOffset, uint _trueHeight)
{
	if (IsNextChunkInShadow(index, _bitIndex, nextChunk, edgeTable))
	{
		if (!IsNextChunkSolid(index, nextChunk, edgeTable))
		{
			_visibilityCheck = false;
		}
		else
		{
			if (_trueHeight < ((nextChunk[edgeTable[(edgeTable[index].lowIndex >> localEdgeNextIndex) & 0xFFF].lowIndex >> localEdgeRayIndex] & 0xF) + _yOffset + 1))
			{
				_visibilityCheck = true;
			}
			else
			{
				_visibilityCheck = false;
			}
		}
	}
	else
	{
		_visibilityCheck = true;
	}

	return _visibilityCheck;
}

//****************************************************************************************************************************************************************************************************
// Ray Methods

uint3 LocalIndexToPos(uint localIndex, RWStructuredBuffer<uint3> chunkTable)
{
	return chunkTable[localIndex];
}

uint3 LocalPosToGlobal(uint3 localPos, RWStructuredBuffer<uint3> chunkPositionTable, uint chunkIndex)
{
	return uint3(localPos.x + (chunkPositionTable[chunkIndex].x * length), localPos.y + (chunkPositionTable[chunkIndex].y * height), localPos.z + (chunkPositionTable[chunkIndex].z * width));
}

uint GlobalPosToIndex(uint3 globalPos, uint globalHeight, uint globalWidth)
{
	return (globalPos.x * globalHeight * globalWidth) + (globalPos.y * globalWidth) + globalPos.z;
}

uint LocalIndexToGlobal(uint localIndex, uint chunkIndex, uint globalHeight, uint globalWidth, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint3> chunkPositionTable)
{
	return GlobalPosToIndex(LocalPosToGlobal(LocalIndexToPos(localIndex, chunkTable), chunkPositionTable, chunkIndex), globalHeight, globalWidth);
}


//returns the global index of the ray start ****THIS IS NOT THE PROPER RAY INDEX****
//do not use this dogshit function for testing only
uint GlobalIndexToRayStartingIndex(uint globalIndex, uint localIndex, uint chunkIndex, RWStructuredBuffer<uint> chunkEdgeTable, RWStructuredBuffer<TriIndex> edgeTable)
{
	    [branch] switch (TrailingFace(chunkEdgeTable, chunkIndex))
		{
		//origin position
		case 0:
			if (TrailingFace(edgeTable, localIndex) == 7)
			{
				return globalIndex % globalStep;
			}
			else
			{
				return globalIndex;
			}
		//bottom left
		case 1:
			if (TrailingFace(edgeTable, localIndex) == 6 || TrailingFace(edgeTable, localIndex) == 7)
			{
				return globalIndex % globalStep;
			}
			else
			{
				return globalIndex;
			}
		//bottom right
		case 2:
			if (TrailingFace(edgeTable, localIndex) == 5 || TrailingFace(edgeTable, localIndex) == 7)
			{
				return globalIndex % globalStep;
			}
			else
			{
				return globalIndex;
			}
		//center bottom
		case 3:
			if (TrailingFace(edgeTable, localIndex) == 3)
			{
				return globalIndex;
			}
			else 
			{
				return globalIndex % globalStep;
			}
		//diagonal middle
		case 4:
			if (TrailingFace(edgeTable, localIndex) == 3)
			{
				return globalIndex % globalStep;
			}
			else
			{
				return globalIndex;
			}
		//middle left
		case 5:
			if (TrailingFace(edgeTable, localIndex) == 0 || TrailingFace(edgeTable, localIndex) == 1 || TrailingFace(edgeTable, localIndex) == 4 || TrailingFace(edgeTable, localIndex) == 5)
			{
				return globalIndex;
			}
			else
			{
				return globalIndex % globalStep;
			}
		//middle right
		case 6:
			if (TrailingFace(edgeTable, localIndex) == 0 || TrailingFace(edgeTable, localIndex) == 2 || TrailingFace(edgeTable, localIndex) == 4 || TrailingFace(edgeTable, localIndex) == 6)
			{
				return globalIndex;
			}
			else
			{
				return globalIndex % globalStep;
			}
		case 7:
			return globalIndex % globalStep;
		//this will never happen
		default:
			return 0;
		}
}

uint GlobalIndexToRayStartingIndex(uint globalIndex, uint chunkIndex, RWStructuredBuffer<uint> chunkEdgeTable)
{
	if (IsTrailingFace(chunkEdgeTable, chunkIndex))
	{
		if (globalIndex <= (globalHeight * globalWidth) - 1)
		{
			return globalIndex;
		}
		else
		{
			if (globalIndex % globalWidth == 0)
			{
				return globalIndex;
			}
			else
			{
				if (globalIndex % (globalWidth * globalHeight) <= globalWidth - 1U)
				{
					return globalIndex;
				}
				else
				{
					return globalIndex % globalStep;
				}
			}
		}
	}
	else
	{
		return globalIndex % globalStep;
	}
}

uint RetardClamp(uint valueIn)
{
	if (valueIn < 2)
	{
		return 0;
	}
	else
	{
		return valueIn - 1;
	}
}
uint RayStartingIndexToRay(uint rayStartingIndex)
{
	return rayStartingIndex - (RetardClamp(IndexToXPosition(rayStartingIndex, globalHeight, globalWidth)) * (globalHeight - 1) * (globalWidth - 1) + RetardClamp(IndexToYPosition(rayStartingIndex, globalHeight, globalWidth)) * (globalWidth - 1));
}

uint LocalIndexToRayIndex(uint localIndex, uint chunkIndex, uint globalHeight, uint globalWidth, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable)
{
	 return RayStartingIndexToRay(GlobalIndexToRayStartingIndex(GlobalPosToIndex(LocalPosToGlobal(LocalIndexToPos(localIndex, chunkTable), chunkPositionTable, chunkIndex), globalHeight, globalWidth), chunkIndex, chunkEdgeTable));
}

uint ChunkIndexToRayStep(uint chunkIndex, RWStructuredBuffer<uint3> chunkPositionTable)
{
	return min(min(chunkPositionTable[chunkIndex].x, chunkPositionTable[chunkIndex].y), chunkPositionTable[chunkIndex].z);
}

uint RayIndexToAdjustedIndex(uint rayStep, uint rayIndex)
{
	return (rayIndex * chunkStepDepth) + rayStep;
}

uint LocalIndexToAdjustedIndex(uint localIndex, uint chunkIndex, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint3> chunkPositionTable)
{
	//return RayIndexToAdjustedIndex(ChunkIndexToRayStep(chunkIndex, chunkPositionTable), GlobalIndexToRay(GlobalIndexToRayStartingIndex(LocalIndexToGlobal(localIndex, chunkIndex, chunkTable, chunkPositionTable), chunkIndex, chunkPositionTable)));
}

void calcNEWTEMPvis(uint localIndex, uint chunkIndex, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint3> chunkPositionTable, RWStructuredBuffer<uint> chunkEdgeTable,  RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<TriIndex> edgeTable)
{
	globalHeightTable[localIndex] = GlobalPosToIndex(LocalPosToGlobal(LocalIndexToPos(localIndex, chunkTable), chunkPositionTable, chunkIndex), globalHeight, globalWidth);
}


//** These methods specific to ray height

uint AdjustedIndexToArray(uint adjustedIndex)
{
	return floor(adjustedIndex / packedSize);
}

uint AdjustedIndexToBit(uint adjustedIndex)
{
	return (adjustedIndex % packedSize);
}

uint GetHeightValue(uint arrayIndex, uint bitIndex, RWStructuredBuffer<uint> globalHeightTable)
{
	return ((globalHeightTable[arrayIndex] >> bitIndex) & 0xF);
}

uint GetHeightValue(uint arrayValue, uint bitIndex)
{
	return ((arrayValue >> bitIndex) & 0xF);
}

uint HeightComparisonSequence(uint localHeight, uint arrayValue, uint bitIndex)
{
	return (arrayValue & ~(0xF << bitIndex * heightBitSize)) | (localHeight << bitIndex * heightBitSize);
}

void GlobalHeightMin(uint arrayIndex, uint bitIndex, uint localIndex, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<uint3> chunkTable)
{
	InterlockedMin(globalHeightTable[arrayIndex], HeightComparisonSequence(chunkTable[localIndex].y, globalHeightTable[arrayIndex], bitIndex));
}

void calcChunkVisGlobalHeight(RWStructuredBuffer<DualIndex> meshProperties, RWStructuredBuffer<uint3> chunkTable, RWStructuredBuffer<uint> globalHeightTable, RWStructuredBuffer<TriIndex> edgeTable, RWStructuredBuffer<uint3> chunkPositionTable, uint localIndex, uint chunkIndex)
{
	if ((meshProperties[localIndex].lowIndex & 0xFFF) != 0)
	{
		uint adjustedIndex = LocalIndexToAdjustedIndex(localIndex, chunkIndex, chunkTable, chunkPositionTable);
		GlobalHeightMin(AdjustedIndexToArray(adjustedIndex), AdjustedIndexToBit(adjustedIndex), localIndex, globalHeightTable, chunkTable);
	}
}

//************************************************************************

[numthreads(1, 1, 1)]
void ZeroCounter(uint3 id : SV_DispatchThreadID)
{
	_Counter[id.x] = 0;
}

[numthreads(1024, 1, 1)]
void InitializeDummyChunks(uint3 id : SV_DispatchThreadID)
{
	_DummyChunkOne[id.x] = 0;
	_DummyChunkTwo[id.x] = 0;
	_AltDummyChunk[id.x].lowIndex = 0;
}

[numthreads(1024, 1, 1)]
void InitializeCubes(uint3 id : SV_DispatchThreadID)
{
	//Ensure the table is wiped
	_EdgeTable[id.x].lowIndex = 0;
	_EdgeTable[id.x].highIndex = 0;
	_EdgeTable[id.x].thirdIndex = 0;

	//fill the reference table
	_ChunkTable[id.x] = IndexToPosition(id.x, height, width);
	//call the edgeCheck method
	_EdgeTable[id.x].lowIndex = LocalEdgeChecks(id.x, _ChunkTable);
}

[numthreads(1024, 1, 1)]
void InitializeChunks(uint3 id : SV_DispatchThreadID)
{
	_ChunkEdgeTable[id.x] = 0;

	_ChunkPositionTable[id.x] = IndexToPosition(id.x, yChunks, zChunks);
	_ChunkEdgeTable[id.x] = ChunkEdgeChecks(id.x, _ChunkPositionTable);
}

[numthreads(1, 1, 1)]
void SingleThread(uint3 id : SV_DispatchThreadID)
{
	uint count = 0;
	for (uint i = 0; i < cubeCount; i++)
	{
		if (_ChunkTable[i].x == 0 || _ChunkTable[i].y == 0 || _ChunkTable[i].z == 0)
		{
			_TempTable[i] = count;
			count++;
		}
	}
}

[numthreads(1024, 1, 1)]
void InitializeRays(uint3 id : SV_DispatchThreadID)
{
	rayCalc(_EdgeTable, _TempTable, id.x);
}

[numthreads(1024, 1, 1)]
void InitializeRaysTwo(uint3 id : SV_DispatchThreadID)
{
	rayCalcTwo(_EdgeTable, _TempTable, id.x);
}

[numthreads(1024, 1, 1)]
void InitializeChunkVisibilityTable(uint3 id : SV_DispatchThreadID)
{
	_ChunkVisibilityTables[id.x] = 15;
}

[numthreads(1024, 1, 1)]
void InitializeGlobalHeightTable(uint3 id: SV_DispatchThreadID)
{
	_GlobalHeightTable[id.x] = 4294967295U;
}

[numthreads(1024, 1, 1)]
void Noise(uint3 id : SV_DispatchThreadID)
{
	//Ensure the Mesh table is wiped
	_MeshProperties[id.x].lowIndex = 0;
	_MeshProperties[id.x].highIndex = 0;

	if(noise((_ChunkTable[id.x] + uint3(xOffset, yOffset, zOffset)) * 0.1) >= .45)
	{
		//this will need to be revisted later for more complex world gen
		_MeshProperties[id.x].lowIndex = 1;
	}
	else
	{
		_MeshProperties[id.x].lowIndex = 1;
	}
}

//method to check other algorithm
[numthreads(1024, 1, 1)]
void CheckFaces(uint3 id : SV_DispatchThreadID)
{
	if (_MeshProperties[id.x].lowIndex != 0 && (_MeshProperties[id.x + 1].lowIndex == 0 || _MeshProperties[id.x - 1].lowIndex == 0
		|| _MeshProperties[id.x + width].lowIndex == 0 || _MeshProperties[id.x - width].lowIndex == 0
		|| _MeshProperties[id.x + width * height].lowIndex == 0 || _MeshProperties[id.x - width * height].lowIndex == 0
		|| _ChunkTable[id.x].y == 0 || _ChunkTable[id.x].y == height - 1 || _ChunkTable[id.x].z == 0 || _ChunkTable[id.x].z == width - 1))
	{
		InterlockedAdd(_Counter[0], 1);
		_MeshProperties[id.x].lowIndex |= 1U << 12;
	}
	else
	{
		_MeshProperties[id.x].lowIndex &= ~(1U << 12);
	}
}

[numthreads(1024, 1, 1)]
void PopulateRender(uint3 id : SV_DispatchThreadID)
{
	if (topEdge)
	{
		if (((_MeshProperties[id.x].highIndex >> 14) & 1U) == 1)
		{
			_RenderProperties.Append(id.x + ((_MeshProperties[id.x].lowIndex & 0xFFF) << 16));
		}
	}
	else
	{
		if (((_MeshProperties[id.x].lowIndex >> 12) & 1U) == 1)
		{
			_RenderProperties.Append(id.x + ((_MeshProperties[id.x].lowIndex & 0xFFF) << 16));
		}
	}
}

//retarded but ok
[numthreads(1024, 1, 1)]
void ChunkVisibilityTable(uint3 id: SV_DispatchThreadID)
{
	calcChunkVis(_MeshProperties, _ChunkTable, _ChunkVisibilityTables, _EdgeTable, id.x);

	//calcChunkVisGlobalHeight(_MeshProperties, _ChunkTable, _GlobalHeightTable, _EdgeTable, _ChunkPositionTable, id.x, chunkIndex);
	
	calcNEWTEMPvis(id.x, chunkIndex, _ChunkTable, _ChunkPositionTable, _ChunkEdgeTable, _MeshProperties, _GlobalHeightTable, _EdgeTable);
}

[numthreads(1024, 1, 1)]
void ChunkVisibilityTableTwo(uint id: SV_DispatchThreadID)
{
	calcChunkVisTwo(_MeshProperties, _ChunkTable, _ChunkVisibilityTables, _EdgeTable, id.x);
}

[numthreads(1024, 1, 1)]
void ChunkGlobalVis(uint3 id : SV_DispatchThreadID)
{
	uint index = round(id.x % 1024);
	uint chunkHeight = round(floor(id.x / 1024));

	if (index < leadingEdgeCount)
	{
		switch (_EdgeTable[_EdgeTable[index].highIndex >> 13].lowIndex & 0x7)
		{
		case 0:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _DiagonalTopChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 1:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _TopLeftChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 4:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _TopRightChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 5:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _MiddleTopChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		}
	}
}

[numthreads(1024, 1, 1)]
void ChunkGlobalVisTwo(uint3 id : SV_DispatchThreadID)
{
	uint index = round(id.x % 1024);
	uint chunkHeight = round(floor(id.x / 1024));

	if (index < leadingEdgeCount)
	{
		switch (_EdgeTable[_EdgeTable[index].highIndex >> 13].lowIndex & 0x7)
		{
		case 2:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _DiagonalMiddleChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 3:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _MiddleLeftChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		case 6:
			calcGlobalVis(_EdgeTable, _ChunkVisibilityTables, _MiddleRightChunk, _ChunkEdgeTable, index, chunkIndex, chunkHeight, currentYChunk);
			break;
		}
	}
}

[numthreads(1024, 1, 1)]
void StupidCull(uint3 id: SV_DispatchThreadID)
{
	_MeshProperties[id.x].lowIndex &= 0xFFF;
	_MeshProperties[id.x].highIndex = 0;

	uint bitIndex = currentYChunk + 5;
	bool visibilityCheck = false;
	bool skip = 1;

	switch (_EdgeTable[id.x].lowIndex & 0x7)
	{
	case 0:
		visibilityCheck = CalcLocalVis(_EdgeTable, _DiagonalTopChunk, visibilityCheck, id.x, bitIndex, topOffset, trueHeight);
		break;
	case 1:
		visibilityCheck = CalcLocalVis(_EdgeTable, _TopLeftChunk, visibilityCheck, id.x, bitIndex, topOffset, trueHeight);
		break;
	case 4:
		visibilityCheck = CalcLocalVis(_EdgeTable, _TopRightChunk, visibilityCheck, id.x, bitIndex, topOffset, trueHeight);
		break;
	case 5:
		visibilityCheck = CalcLocalVis(_EdgeTable, _MiddleTopChunk, visibilityCheck, id.x, bitIndex, topOffset, trueHeight);
		break;
	default:
		skip = 0;
		break;
	}
	
	calculateVisibilityHighIndex(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, 14);

	/*
	switch (_EdgeTable[id.x].lowIndex & 0x7)
	{
	case 0:
		if (((_ChunkVisibilityTables[_EdgeTable[id.x].lowIndex >> 17] >> bitIndex) & 1U) == 1 && ((((_DiagonalTopChunk[_EdgeTable[(_EdgeTable[id.x].lowIndex >> 5) & 0xFFF].lowIndex >> 17] >> bitIndex) & 1U) == 0)))
		{
			visibilityCheck = true;
		}
		break;
	case 1:
		if (((_ChunkVisibilityTables[_EdgeTable[id.x].lowIndex >> 17] >> bitIndex) & 1U) == 1 && (((_TopLeftChunk[_EdgeTable[(_EdgeTable[id.x].lowIndex >> 5) & 0xFFF].lowIndex >> 17] >> bitIndex) & 1U) == 0))
		{


			visibilityCheck = true;
		}
		break;
	case 4:
		if (((_ChunkVisibilityTables[_EdgeTable[id.x].lowIndex >> 17] >> bitIndex) & 1U) == 1 && (((_TopRightChunk[_EdgeTable[(_EdgeTable[id.x].lowIndex >> 5) & 0xFFF].lowIndex >> 17] >> bitIndex) & 1U) == 0))
		{


			visibilityCheck = true;
		}
		break;
	case 5:
		if (((_ChunkVisibilityTables[_EdgeTable[id.x].lowIndex >> 17] >> bitIndex) & 1U) == 1 && (((_MiddleTopChunk[_EdgeTable[(_EdgeTable[id.x].lowIndex >> 5) & 0xFFF].lowIndex >> 17] >> bitIndex) & 1U) == 0))
		{

			visibilityCheck = true;
		}
		break;
	default:
		skip = 0;
		break;
	}
	*/

	/*
	if (((_DiagonalTopChunk[_EdgeTable[(_EdgeTable[id.x].lowIndex >> 5) & 0xFFF].lowIndex >> 17] >> bitIndex) & 1U) == 1)
		{
			if (((_DiagonalTopChunk[_EdgeTable[(_EdgeTable[id.x].lowIndex >> 5) & 0xFFF].lowIndex >> 17] >> 4) & 1U) == 0)
			{
				visibilityCheck = false;
			}
			else
			{
				if (trueHeight < (_DiagonalTopChunk[_EdgeTable[(_EdgeTable[id.x].lowIndex >> 5) & 0xFFF].lowIndex >> 17] & 0xF) + yOffset)
				{
					visibilityCheck = true;
				}
				else
				{
					visibilityCheck = false;
				}
			}
		}
		else
		{
			visibilityCheck = true;
		}
	*/
}

//this is retarded but necessary because of buffer limit
[numthreads(1024, 1, 1)]
void StupidCull2(uint3 id: SV_DispatchThreadID)
{
	bool visibilityCheck = false;
	bool skip = 1;

	uint bitIndex = currentYChunk + 5;

	switch (_EdgeTable[id.x].lowIndex & 0x7)
	{
	case 2:
		visibilityCheck = CalcLocalVis(_EdgeTable, _DiagonalMiddleChunk, visibilityCheck, id.x, bitIndex, sameLevelOffset, trueHeight);
		break;
	case 3:
		visibilityCheck = CalcLocalVis(_EdgeTable, _MiddleLeftChunk, visibilityCheck, id.x, bitIndex, sameLevelOffset, trueHeight);
		break;
	case 6:
		visibilityCheck = CalcLocalVis(_EdgeTable, _MiddleRightChunk, visibilityCheck, id.x, bitIndex, sameLevelOffset, trueHeight);
		break;
	default:
		skip = 0;
		break;
	}
	calculateVisibilityHighIndex(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, 14);
}

[numthreads(1024, 1, 1)]
void CoolCull(uint3 id : SV_DispatchThreadID)
{
	_MeshProperties[id.x].lowIndex &= 0xFFF;
	_MeshProperties[id.x].highIndex = 0;

	if (_ChunkTable[id.x].y <= crossHeight)
	{
		if (_ChunkTable[id.x].y == crossHeight || ((_EdgeTable[id.x].lowIndex >> localEdgeLeadingSides) & 1U) == 1)
		{
			bool visibilityCheck = false;
			bool skip = 1;

			switch (_EdgeTable[id.x].lowIndex & 0x7)
			{
			case 0:
				visibilityCheck = true;
				break;
			case 1:
				visibilityCheck = true;
				break;
			case 2:
				visibilityCheck = ((_IntDiagonalMiddleChunk[(_EdgeTable[id.x].lowIndex >> localEdgeNextIndex) & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 3:
				visibilityCheck = ((_IntMiddleLeftChunk[(_EdgeTable[id.x].lowIndex >> localEdgeNextIndex) & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 4:
				visibilityCheck = true;
				break;
			case 5:
				visibilityCheck = true;
				break;
			case 6:
				visibilityCheck = ((_IntMiddleRightChunk[(_EdgeTable[id.x].lowIndex >> localEdgeNextIndex) & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 7:
				visibilityCheck = true;
				break;
			default:
				skip = 0;
				break;
			}

			/*
			switch (_EdgeTable[id.x].lowIndex & 0x7)
			{
			case 0:
				visibilityCheck = true;
				break;
			case 1:
				visibilityCheck = true;
				break;
			case 2:
				visibilityCheck = ((_IntDiagonalMiddleChunk[_EdgeTable[_EdgeTable[_EdgeTable[id.x].lowIndex >> 17].thirdIndex].highIndex & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 3:
				visibilityCheck = ((_IntMiddleLeftChunk[_EdgeTable[_EdgeTable[_EdgeTable[id.x].lowIndex >> 17].thirdIndex].highIndex & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 4:
				visibilityCheck = true;
				break;
			case 5:
				visibilityCheck = true;
				break;
			case 6:
				visibilityCheck = ((_IntMiddleRightChunk[_EdgeTable[_EdgeTable[_EdgeTable[id.x].lowIndex >> 17].thirdIndex].highIndex & 0xFFF].lowIndex >> 13) ^ 1U);
				break;
			case 7:
				visibilityCheck = true;
				break;
			default:
				skip = 0;
				break;
			}
			*/

			calculateVisibility(_Counter, _MeshProperties, _EdgeTable, id.x, visibilityCheck, skip, 0);
		}
	}
}


	

	
